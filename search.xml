<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>/go</title>
    <url>/2020/04/19/go/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>/html</title>
    <url>/2020/04/19/html/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>/js</title>
    <url>/2020/04/19/js/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>/spring</title>
    <url>/2020/04/19/spring/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>/springmvc</title>
    <url>/2020/04/19/springmvc/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>java陷阱之重写私有方法</title>
    <url>/2020/04/19/java/java%E9%99%B7%E9%98%B1%E4%B9%8B%E9%87%8D%E5%86%99%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>当我们有时候写JAVA代码的时候可能会天真的使用下面的写法，<br>你会发现你所写的方法是错误的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package polymorphism;</span><br><span class="line"></span><br><span class="line">public class PrivateOverride &#123;</span><br><span class="line">    private void f() &#123;</span><br><span class="line">        System.out.println(&quot;private f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PrivateOverride po &#x3D; new Derived();</span><br><span class="line">        po.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Derived extends PrivateOverride &#123;</span><br><span class="line">    public void f() &#123;</span><br><span class="line">        System.out.println(&quot;public f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private f()</span><br></pre></td></tr></table></figure>
<p>你可能期望输出是 public f()，然而 private 方法可以当作是 final 的，<br>对于派生类来说是隐蔽的。因此，这里 Derived 的 f() 是一个全新的方法；<br>因为基类版本的 f() 屏蔽了 Derived ，因此它都不算是重写方法。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis运行流程</title>
    <url>/2020/04/19/mybatis/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MyBatis的整个运行流程，也是紧紧围绕着数据库连接池配置文件MyBatisConfig.xml(一般按个人<br>喜好来命名，但规范命名比较好)，以及SQL映射配置文件Mapper.xml而开展的。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先SqlSessionFactory会话工厂会通过Resources资源信息加载对象获取MyBatisConfig.xml配置<br>文件信息,然后生产可以与数据库进行交互会话实例类SqlSession。会话实例类SqlSession可以根据Mapper配置文件<br>中的SQL配置，去执行相应的增删改查操作。而在SQLSession类内部，是通过执行器Executor(分为基本执行器和缓存<br>执行器)对数据库进行操作的。执行器Executor与数据库交互，依靠的是底层封装对象Mappered Statement，它封装了<br>从Mapper文件中读取的信息（包括SQL语句、输入参数、输出结果类型）。通过执行器Executor与底层封装对象MapperedStatement的结合，MyBatis就实现了与数据库进行交互的功能。<br>  Mybatis运行流程结构如下图所示：</p>
<img src="/2020/04/19/mybatis/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png" class="" title="MyBatis运行流程">]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>maven引入log4j文件</title>
    <url>/2020/05/06/maven/maven/</url>
    <content><![CDATA[<p>在maven中使用log4j时还需要引入下面的坐标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h3>配置log4j</h3>
Appender 为日志输出目的地，Log4j提供的appender有以下几种：
org.apache.log4j.ConsoleAppender（控制台），
org.apache.log4j.FileAppender（文件），
org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

<p>Layout：日志输出格式，Log4j提供的layout有以下几种：<br>org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br>org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>
<p>打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:<br>　　%m 输出代码中指定的消息<br>　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>　　%r 输出自应用启动到输出该log信息耗费的毫秒数<br>　　%c 输出所属的类目，通常就是所在类的全名<br>　　%t 输出产生该日志事件的线程名<br>　　%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”<br>　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日 22 ： 10 ： 28 ， 921<br>　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )</p>
<h4>log4j.properties</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### set log levels ###</span><br><span class="line">log4j.rootLogger &#x3D; DEBUG,Console,File</span><br><span class="line">###  输出到控制台  ###</span><br><span class="line">log4j.appender.Console&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.Target&#x3D;System.out</span><br><span class="line">log4j.appender.Console.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern&#x3D; %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line">### 输出到日志文件 ###</span><br><span class="line">log4j.appender.File&#x3D;org.apache.log4j.RollingFileAppender </span><br><span class="line">log4j.appender.File.File&#x3D;$&#123;project&#125;&#x2F;WEB-INF&#x2F;logs&#x2F;app.log</span><br><span class="line">log4j.appender.File.DatePattern&#x3D;_yyyyMMdd&#39;.log&#39;</span><br><span class="line">log4j.appender.File.MaxFileSize&#x3D;10MB</span><br><span class="line">log4j.appender.File.Threshold&#x3D;ALL</span><br><span class="line">log4j.appender.File.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.File.layout.ConversionPattern&#x3D;[%p][%d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125;][%c]%m%n</span><br></pre></td></tr></table></figure>
<h3>使用log4j</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.xwx.text;</span><br><span class="line"></span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">	</span><br><span class="line">	private static Logger log &#x3D; Logger.getLogger(Test.class.getClass());</span><br><span class="line">	@Test</span><br><span class="line">	public void testLog()&#123;</span><br><span class="line">		log.debug(&quot;debug&quot;);</span><br><span class="line">		log.error(&quot;error&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis缓存机制</title>
    <url>/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2>一级缓存的工作原理如下图所示：</h2>
<img src="/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png" class="" title="MyBatis缓存机制">
&nbsp;&nbsp;&nbsp;&nbsp;该图阐述了一个SqlSession类的实例对象下的一级缓存的工作原理。当第一次查询id为1
的用户时，sqlSession首先到一级缓存区域查询，如果没有相关数据，则会到数据库中去查询。然后sqlSession将该
查询结果保存到一级缓存区域。在下一次查询的时候，如果sqlSession执行了commit查询操作（即执行了修改、添加
和删除），则会清空它的一级缓存区域，以此来保证缓存中的信息时最新的，避免脏读现象发生。如果期间sqlSession
一直没有执行commit操作修改数据，那么下一次查询id为1的用户信息时，sqlSession在一级缓存中就会发现该信息，
然后从缓存中获取用户信息。
<h2>二级缓存原理</h2>
&nbsp;&nbsp;&nbsp;&nbsp;由上可知，一级缓存时基于同一个SqlSession类的实例对象的。但是，有些时候在Web工程
中会将执行查询操作的方法封装在一个Service方法中，当执行完一次后，Service方法结束，此时SqlSession类的实例
对象就会关闭，一级缓存就会被清空。此时若再次调用Service方法查询同一个信息时，会新打开一个SqlSession类的实
例对象，由于一级缓存已经被清空，所以执行再次访问数据库，并将查询的数据再次放入缓存中。
&nbsp;&nbsp;&nbsp;&nbsp;为了解决这个问题，Mybatis引入了二级缓存。Mybatis的二级缓存存在于Mapper实例中，当
多个SqlSession类的实例对象加载Mapper进行查询时，会先去Mapper的缓存区域寻找该值，若不存在，则去数据库中查询，
然后将查询出来的结果存储到缓存区域，待下次查询相同数据时，从缓存区域中获取。当某个Sqlsession类的实例对象执行
了增、删、改等改变数据的操作时，Mapper实例都会清空二级缓存。
<img src="/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.png" class="" title="MyBatis缓存机制">
<h2>Mybatis的一级缓存和二级缓存执行顺序</h2>
1、先判断二级缓存是否开启，如果没开启，再判断一级缓存是否开启，如果没开启，直接查数据库

<p>2、如果一级缓存关闭，即使二级缓存开启也没有数据，因为二级缓存的数据从一级缓存获取</p>
<p>3、一般不会关闭一级缓存</p>
<p>4、二级缓存默认不开启</p>
<p>5、如果二级缓存关闭，直接判断一级缓存是否有数据，如果没有就查数据库</p>
<p>6、如果二级缓存开启，先判断二级缓存有没有数据，如果有就直接返回；如果没有，就查询一级缓存，如果有就返回，没有就查询数据库；</p>
<p>==》综上：先查二级缓存，再查一级缓存，再查数据库；即使在一个sqlSession中，也会先查二级缓存；一个namespace中的查询更是如此；</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>spring注解笔记</title>
    <url>/2020/04/19/spring/spring%E6%B3%A8%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2>spring注解详解</h2>
&nbsp;&nbsp;&nbsp;&nbsp;spring注解是用于注入数据的，它们的作用就和在xml配置文件下写一个property标签的作用是一样的,当引用注解时，我们的spring配置文件应该
使用下面的头文件来使用;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.qin&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
&nbsp;&nbsp;&nbsp;&nbsp;其中context:componet-san标签时扫描注解包的意思，当配置
这个配置文件的时候，spring会自动去扫描这个包下所有的spring注解，读取这个类，把注解
下的类加入到springioc容器中管理，而容器采用的是静态的Map<String,Object> beans来保存
这些被注解的类。
<h2>注解</h2>
下面我将详细介绍部分注解的作用：

<p> &nbsp;&nbsp;&nbsp;&nbsp;@Component:<br>                         作用：用于把当前类对象存入spring容器中<br>                          属性：<br>                          value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写<br>                          @Controller：一般用在表现层<br>                          @Service：一般用在业务层<br>                          @Repository：一般用在持久层<br>                          以上三个注解他们的作用和属性与Component是一模一样<br>                          他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰</p>
<p> &nbsp;&nbsp;&nbsp;&nbsp;@Autowired:<br>                             作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功<br>                                   如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。<br>                                   如果Ioc容器中有多个类型匹配时：<br>                             出现位置：<br>                                 可以是变量上，也可以是方法上<br>                             细节：<br>                                 在使用注解注入时，set方法就不是必须的了。<br> &nbsp;&nbsp;&nbsp;&nbsp;用于改变作用范围的<br>                              他们的作用就和在bean标签中使用scope属性实现的功能是一样的<br>                              @Scope<br>                                  作用：用于指定bean的作用范围<br>                                  属性：<br>                                      value：指定范围的取值。常用取值：singleton prototype<br>                         和生命周期相关 (了解)<br>                              他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的<br>                              @PreDestroy<br>                                  作用：用于指定销毁方法<br>                              @PostConstruct<br>                                  作用：用于指定初始化方法<br> &nbsp;&nbsp;&nbsp;&nbsp;@Qualifier:<br>                             作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以（稍后我们讲）<br>                             属性：<br>                                 value：用于指定注入bean的id。<br>                         @Resource<br>                             作用：直接按照bean的id注入。它可以独立使用<br>                             属性：<br>                                 name：用于指定bean的id。<br>                         以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。<br>                         另外，集合类型的注入只能通过XML来实现。<br>                         @Value<br>                             作用：用于注入基本类型和String类型的数据<br>                             属性：<br>                                 value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）<br>                                         SpEL的写法：${表达式}</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring配置文件类注解</title>
    <url>/2020/04/19/spring/spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%B1%BB%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2>基于注解的配置文件</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在spring中我们可以使用注解来代替配置文件，而具体的一个配置模板如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.itheima&quot;)</span><br><span class="line">public class configuration &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    * @Bean相当于spring标签中的bean标签</span><br><span class="line">    * Bean标签不写value值是bean对象的id默认是方法的名字+小写</span><br><span class="line">    * @Scope相当于设置bean对象属于单例或者多例,这里表示多例对象的意思</span><br><span class="line">    * *&#x2F;</span><br><span class="line">    @Bean(&quot;runner&quot;)</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public QueryRunner createRunner(DataSource ds)</span><br><span class="line">    &#123;</span><br><span class="line">        return new QueryRunner(ds);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(&quot;dataSource&quot;)</span><br><span class="line">    public DataSource createDataSource()</span><br><span class="line">    &#123;</span><br><span class="line">        ComboPooledDataSource ds&#x3D;new ComboPooledDataSource();</span><br><span class="line">        try &#123;</span><br><span class="line">            ds.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            ds.setJdbcUrl(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;);</span><br><span class="line">            ds.setUser(&quot;root&quot;);</span><br><span class="line">            ds.setPassword(&quot;&quot;);</span><br><span class="line">        &#125; catch (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2>配置类注解详解</h2>
&nbsp;&nbsp;&nbsp;&nbsp;上面的代码只是简单的介绍了spring配置文件中的用法，这里将详细介绍:

<p>@Configuration<br>作用： 用于指定当前类是一个spring配置类，当创建容器时会从该类上加载注解。获取容器时需要使用AnnotationApplicationContext(有@Configuration注解的类.class)。<br>属性： value:用于指定配置类的字节码</p>
<p>@ComponentScan<br>作用： 用于指定spring在初始化容器时要扫描的包。作用和在spring的xml配置文件中的： &lt;context:component-scan base-package=”com.itheima”/&gt;是一样的。<br>属性： basePackages：用于指定要扫描的包。和该注解中的value属性作用一样。</p>
<p>@Bean<br>作用： 该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。<br>属性： name：给当前@Bean注解方法创建的对象指定一个名称(即bean的id）。</p>
<p>@PropertySource<br>作用：用于加载.properties文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到properties配置文件中，就可以使用此注解指定properties配置文件的位置。<br>属性： value[]：用于指定properties文件位置。如果是在类路径下，需要写上classpath:</p>
<p>@Import<br>作用： 用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration注解。当然，写上也没问题。<br>属性： value[]：用于指定其他配置类的字节码。</p>
<h2>加载注解配置类</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;当我们采用注解来开发时，通常需要使用下面的代码来加载注解通过注解获取容器： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">&#x2F;&#x2F;SpringConfiguration.class表示被@Configuration注解的来，这样spring才可以识别得到</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>java动态代理</title>
    <url>/2020/05/13/java/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2>java动态代理</h2>
&nbsp;&nbsp;&nbsp;&nbsp;今天我学习到了java动态代理的用法，刚好为了加强记忆，我便做了一份笔记。
<img src="/2020/05/13/java/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/%E4%BB%A3%E7%90%86.png" class="" title="java动态代理">
&nbsp;&nbsp;&nbsp;&nbsp;由上面的图我们可以知道，在以前，我们买东西的时候都是直接去和产家联系的。然而，现在我们已经很少能够直接和产家
联系了，都是由中间商来代理销售产品的，而中间商也相当于代理商。因为它代理了产家的产品，相应的产家有销售和售后功能，同样的，代理商也拥有
产家的功能。首先我们需要一个产家接口
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface IProducter &#123;</span><br><span class="line">    void saleProduct(float money);</span><br><span class="line">    void afterService(float money);</span><br><span class="line">&#125;</span><br><span class="line">并且需要它的一个实现类</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;生产者</span><br><span class="line">public class producter implements IProducter&#123;</span><br><span class="line">    public void saleProduct(float money)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;销售产品，并拿到&quot;+money);</span><br><span class="line">    &#125;</span><br><span class="line">    public void afterService(float money)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;提供售后服务&quot;+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后我们用一个类来模拟消费者
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;模拟一个消费者</span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">            newProxyInstance方法的参数:</span><br><span class="line">                ClassLoader:类加载器</span><br><span class="line">                    它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法</span><br><span class="line">                Class[]:字节码数组</span><br><span class="line">                    它是用于加载代理对象字节码的。和被代理对象有相同方法。固定写法</span><br><span class="line">                InvocationHandler:用于增强的代码</span><br><span class="line">                    它是让我们写如何代理。我们一般都是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的，</span><br><span class="line">                    此接口的实现类都是谁用谁写。</span><br><span class="line">          *&#x2F;</span><br><span class="line">        IProducter ip&#x3D; (IProducter) Proxy.newProxyInstance(IProducter.class.getClassLoader(), new Class[]&#123;IProducter.class&#125;, new InvocationHandler() &#123;</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                Float returanValue&#x3D; (Float) args[0];</span><br><span class="line">                if(&quot;saleProduct&quot;.equals(method.getName()))</span><br><span class="line">                returanValue &#x3D; (Float) method.invoke(new producter(),returanValue*0.8f);</span><br><span class="line">                return returanValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ip.saleProduct(2000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下类我们来对动态代理在做一个总结：</p>
<h2>动态代理</h2>

<pre><code>特点:字节码随用随创建，随用随加载

作用:在不修改源码的基础上对方法增强

分类：

    基于接口的动态代理

    基于子类的动态代理

基于接口的动态代理

    涉及的类：Proxy

    提供者：JDK官方

如何创建对象：

    使用Proxy中的newProxyInstance()方法

创建代理类最少实现一个接口，如果没有则不能使用</code></pre>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>springAOPxml配置</title>
    <url>/2020/05/14/spring/springAOPxml%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2>AOP相关术语</h2>

<p>Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。<br>Pointcut(切入点): 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。<br>Advice(通知/增强): 所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。<br>通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。<br>Introduction(引介): 引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。 Target(目标对象): 代理的目标对象。<br>Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。<br>spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。<br>Proxy（代理）: 一个类被AOP织入增强后，就产生一个结果代理类。<br>Aspect(切面): 是切入点和通知（引介）的结合。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用springaop时我们要导入下面的约束</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h2>配置步骤</h2>
<h3>第一步：把通知类用bean标签配置起来</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&lt;!-- 配置通知 --&gt; </span><br><span class="line">&lt;bean id&#x3D;&quot;txManager&quot; class&#x3D;&quot;com.theqin.utils.TransactionManager&quot;&gt; </span><br><span class="line">    &lt;property name&#x3D;&quot;dbAssit&quot; ref&#x3D;&quot;dbAssit&quot;&gt;&lt;&#x2F;property&gt; </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h3>第二步：使用aop:config声明aop配置</h3>

<pre><code>aop:config: 作用：用于声明开始aop的配置 
&lt;aop:config&gt;&lt;/aop:config&gt;</code></pre><h3>第三步：使用aop:config声明aop配置</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;aop:aspect: 作用： 用于配置切面。 属性： id：给切面提供一个唯一标识。 ref：引用配置好的通知类bean的id。 </span><br><span class="line">&lt;aop:aspect id&#x3D;&quot;txAdvice&quot; ref&#x3D;&quot;txManager&quot;&gt; </span><br><span class="line">&#x2F;&#x2F;&lt;!--配置通知的类型要写在此处--&gt;</span><br><span class="line"> &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>

<h3>第四步：使用aop:pointcut配置切入点表达式</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;aop:pointcut： </span><br><span class="line">&#x2F;&#x2F;作用： 用于配置切入点表达式。就是指定对哪些类的哪些方法进行增强。 </span><br><span class="line">&#x2F;&#x2F;属性： expression：用于定义切入点表达式。 id：用于给切入点表达式提供一个唯一标识 </span><br><span class="line">&lt;aop:pointcut expression&#x3D;&quot;execution( public void com.theqin.service.impl.AccountServiceImpl.transfer( ..) )&quot; </span><br><span class="line">id&#x3D;&quot;pt1&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<h2>关于expression表达式的用法</h2>

<pre><code>关键字:execution(表达式)
表达式:
      访问修饰符(可以省略) 返回值 包名.包名.包名...类名.方法名(参数方法)
标准的表达式写法:
      public void com.theqin.service.impl.AccountServiceImpl.saveAccount()
      返回值可以使用通配符,表示任意返回值:
        * com.theqin.service.impl.AccountServiceImpl.saveAccount()
      包名可以用通配符,表示任意包。但是有几级包就写几个*
        * *.*.*.*.*.saveAccount()
      包名可以使用..表示当前包及其字包
        * *..*.saveAccount()
      类名和方法名都可以用通配符来替代
        * *..*.*()
      当方法中有参数时可以用..来替代
        * *..*.*(..)  这时候的表达式表示一个全统配符，可以匹配所有的类</code></pre>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring基于xml的事务配置</title>
    <url>/2020/05/15/spring/spring%E5%9F%BA%E4%BA%8Exml%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2>spring基于xml的事务配置</h2>

<p>首先事务通知的配置需要一下的约束<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line">        &lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></p>
<p>1.配置事务管理器<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot;  class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">     &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line"> &lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></p>
<p>2.配置事务的通知<br>            此时我们需要导入事务的约束，tx和aop的名称空间和约束<br>            使用tx:advice标签配置事务通知<br>                属性：<br>                    id:给事务通知起一个唯一标识<br>                    transaction-manager:给事务通知提供一个事务管理器引用<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:advice&gt;</span><br></pre></td></tr></table></figure><br>3.配置AOP中的通用切入点表达式,建立事务通知和切入点表达式的对应关系在事务的通知tx:advice标签的内部,配置事务的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置事务的通知--&gt;</span><br><span class="line">&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        read-only&#x3D;用于指定事务是否只读，只有查询方法才能设置为true</span><br><span class="line">        propagation&#x3D;用于指定事务的传播行为。默认值使REQUIRED,表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</span><br><span class="line">        isolation&#x3D;用于指定事务的隔离级别。默认使DEFAULT，表示使用数据库的默认隔离级别</span><br><span class="line">        no-rollback-for&#x3D;用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时。事务不回滚，没有默认值。不写时表示任何异常都回滚。</span><br><span class="line">        rollback-for&#x3D;用于指定一个异常，用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚，没有默认值。不写时表示任何异常都回滚</span><br><span class="line">        timeout&#x3D;用于指定事务的超时时间，默认值使-1表示永不超时，如果指定了数值，以秒为单位</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot; read-only&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;tx:method name&#x3D;&quot;find*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;false&quot;&gt;&lt;&#x2F;tx:method&gt;&lt;!--优先级大于上方--&gt;</span><br><span class="line">    &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">&lt;&#x2F;tx:advice&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id&#x3D;&quot;pt1&quot; expression&#x3D;&quot;execution(* com.itheima.service.impl.AccountServiceImpl.*(..))&quot;&gt;&lt;&#x2F;aop:pointcut&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:advisor&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring基于注解的事务</title>
    <url>/2020/05/15/spring/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2>spring基于注解的事务</h2>

<h4>spring中基于注解的声明式事务控制配置步骤</h4>

<p>1.配置事务管理器</p>
<p>2.开启spring对注解事务的支持</p>
<p>3.在需要事务支持的地方使用@Transactional注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;总的操作在下面代码中</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.itheima&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot;  class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc的基本使用配置</title>
    <url>/2020/05/16/springmvc/springmvc%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2>springmvc的基本使用配置</h2>
在简单的使用springmvc时我们需要进行一个简单的入门配置,首先我们需要在resource配置文件根目录下配置spring的基本配置文件，一般命名为springmvc.xml
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">        &lt;!--spring的配置，开启注解扫描,用来把springmvc的servlet放入容器中--&gt;</span><br><span class="line">        &lt;context:component-scan base-package&#x3D;&quot;cn.itcast&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">        &lt;!--springmvc的视图解析器,用于将返回的字符串解析为要跳转的页面--&gt;</span><br><span class="line">        &lt;bean id&#x3D;&quot;viewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;pages&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">        &lt;!--开启springmvc的框架注解支持--&gt;</span><br><span class="line">        &lt;!--使用&lt;mvc:annotation-driven&gt;标签会自动加载RequestMappingHandler(处理映射器)和--&gt;</span><br><span class="line">        &lt;!--RequestMappingHandlerAdapter(处理适配器),可用在springmvc.xml配置文件中使用这个标签来代替注解适配器和适配器的配置--&gt;</span><br><span class="line">        &lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
然后还需要在web.xml配置文件中加载DispatcherServlet和在其内部中使用init-parm引入springmvc配置文件
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;&#x2F;display-name&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">      &lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc解决中文乱码问题</title>
    <url>/2020/05/16/springmvc/springmvc%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2>springmvc解决中文乱码问题</h2>

<p>有时候我们在使用springmvc的时候会出现中文乱码的问题，这个时候我们就需要在web.xml中配置一个</p>
<p>springmvc的过滤器来解决中文乱码的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置过滤器--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">  &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc自定义类型转换器</title>
    <url>/2020/05/16/springmvc/springmvc%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    <content><![CDATA[<h2>springmvc自定义类型转换器</h2>

<p>在springmvc的编程过程中，有时候我们在绑定一个日期的参数时不太符合我们的要求，这时候我们就需要自定义一个<br>类型转换器来转换时间的格式，并在springmvc的配置文件中引用它。在使用自定义的转换器时，我们需要实现一个接口<br>Converter&lt;S,T&gt;,S代表字符串，T代表要转换成的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringtoDate implements Converter&lt;String, Date&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Date convert(String s) &#123;</span><br><span class="line">        if (s&#x3D;&#x3D;null)</span><br><span class="line">        &#123;</span><br><span class="line">            throw new RuntimeException(&quot;请您传入数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        Date date&#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            date&#x3D;sdf.parse(s);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们需要在配置文件中配置并引用它。值得注意的是，当我们配置了转换器之后，我们需要在<a href="mvc:annotation">mvc:annotation</a>的标签中来引用它，<br>如果不引用的话，springmvc还是会使用默认的类型转换器，导致我们自定义的转换器无法生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置自定义的类型转换器--&gt;</span><br><span class="line">       &lt;bean id&#x3D;&quot;conversionServiceFactoryBean&quot; class&#x3D;&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">               &lt;property name&#x3D;&quot;converters&quot;&gt;</span><br><span class="line">                       &lt;set&gt;</span><br><span class="line">                               &lt;bean class&#x3D;&quot;cn.itcast.utils.StringtoDate&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">                       &lt;&#x2F;set&gt;</span><br><span class="line">               &lt;&#x2F;property&gt;</span><br><span class="line">       &lt;&#x2F;bean&gt;</span><br><span class="line">       &lt;mvc:annotation-driven conversion-service&#x3D;&quot;conversionServiceFactoryBean&quot;&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc注解</title>
    <url>/2020/05/17/springmvc/springmvc%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2>springmvc注解</h2>

<p>@RequestParam<br>    作用:把请求中指定名称的参数给控制器中的形参赋值。<br>    属性:<br>        value:请求参数的名称<br>        required:请求参数是否提供此参数。默认值:true。表示必须提供,如果不提供将报错。</p>
<p>@RequestBody<br>    作用:用于获取请求体内容。直接使用得到的是key=value&amp;key=value…结构的数据<br>         get方式不适用,一般用户json字符串的转换比较多一点,方便<br>    属性:<br>         required:是否必须有请求体。默认值是true，当取值为true时,get请求方式会报错，如果取值为false，<br>         get请求为null。<br>@PathVaribale<br>    作用:用于绑定url中的占位符。例如：请求url中/delete/{id},这个id就是url占位符。<br>         url支持占位符是spring3.0之后加入的。是springmvc支持rest风格URL的一个重要标志。<br>    属性:<br>        value:用于指定url中的占位符的名称<br>        required:是否必须提供占位符<br>@RequestHeader<br>    作用:<br>        用于获取请求消息头。<br>    属性：<br>        value:提供消息头名称<br>        required:是否必须有此消息头<br>    注:<br>        在实际开发中一般不怎么用<br>@CokieValue<br>    作用:<br>        用于把指定cookie名称的值传入控制方法参数。<br>    属性:<br>        value:只用cookie的名称<br>        required:是否必须有此cookie<br>@ModelAttribute<br>    作用:<br>         该注解是SpringMVC4.3版本以后新加入的。它可以用于修饰方法和参数。 出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。<br>         它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。 出现在参数上，获取指定的数据给参数赋值。<br>    属性：<br>         value：用于获取数据的key。key可以是POJO的属性名称，也可以是map结构的key。 应用场景： 当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。<br>         例如： 我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容置为null，此时就可以使用此注解解决问题。<br>@SessionAttribute<br>    作用：<br>        用于多次执行控制器方法间的参数共享。<br>    属性：<br>        value：用于指定存入的属性名称 type：用于指定存入的数据类型。</p>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc配置不拦截静态资源</title>
    <url>/2020/05/17/springmvc/springmvc%E9%85%8D%E7%BD%AE%E4%B8%8D%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而<br>不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置<br>1.mvc:resources标签配置不过滤<br>2.location元素表示webapp目录下的包下的所有文件<br>3.mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 设置静态资源不过滤 --&gt;</span><br><span class="line">&lt;mvc:resources location&#x3D;&quot;&#x2F;css&#x2F;&quot; mapping&#x3D;&quot;&#x2F;css&#x2F;**&quot;&#x2F;&gt; &lt;!-- 样式 --&gt;</span><br><span class="line">&lt;mvc:resources location&#x3D;&quot;&#x2F;images&#x2F;&quot; mapping&#x3D;&quot;&#x2F;images&#x2F;**&quot;&#x2F;&gt; &lt;!-- 图片 --&gt;</span><br><span class="line">&lt;mvc:resources location&#x3D;&quot;&#x2F;js&#x2F;&quot; mapping&#x3D;&quot;&#x2F;js&#x2F;**&quot;&#x2F;&gt; &lt;!-- javascript --&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc值JSON数据前后端转换</title>
    <url>/2020/05/17/springmvc/springmvc%E4%B9%8BJSON%E6%95%B0%E6%8D%AE%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>在开发的时候我们常常需要对json数据的前后端进行转换，当我们使用springmvc的注解来开发时就可以减少了我们的工作量。<br>假设我们使用jquery进行一个ajax请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(function () &#123;</span><br><span class="line">    $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          url:&quot;user&#x2F;testAjax&quot;,</span><br><span class="line">          contentType:&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;,</span><br><span class="line">          data:&#39;&#123;&quot;username&quot;:&quot;呵呵&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;money&quot;:1000&#125;&#39;,</span><br><span class="line">          dataType:&#39;json&#39;,</span><br><span class="line">          type:&quot;post&quot;,</span><br><span class="line">          success:function (data) &#123;</span><br><span class="line">                alert(data.username);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>当我们发送数据时，服务器端可以使用@RequestBody来接受jason数据并且自动转换,并使用@ReponseBody来并返回json数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(value &#x3D; &quot;user&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @RequestMapping(&quot;testAjax&quot;)</span><br><span class="line">    public @ResponseBody User testAjax(@RequestBody User user)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        return  user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当使用@ResponseBody时我们需要在maven的来引入以下的依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc之文件上传</title>
    <url>/2020/05/17/springmvc/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>传统的方式需要修改以下表单的提交格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#x2F;user&#x2F;fileUpload1&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">        选择文件:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upload&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传文件&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>还要导一下响应的依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>然后再服务器端需要这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;fileUpload1&quot;)</span><br><span class="line">    public String fileUpload1(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;文件输出&quot;);</span><br><span class="line">        String path&#x3D;request.getSession().getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File file&#x3D;new File(path);</span><br><span class="line">        if(!file.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        DiskFileItemFactory factory&#x3D;new DiskFileItemFactory();</span><br><span class="line">        ServletFileUpload upload&#x3D;new ServletFileUpload(factory);</span><br><span class="line">        List&lt;FileItem&gt; list&#x3D;upload.parseRequest(request);</span><br><span class="line">        for (FileItem item:list)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;判断当前对象是否是一个上传表单项</span><br><span class="line">            if (item.isFormField())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;说明表单项</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;说明上传的是文件项目</span><br><span class="line">                &#x2F;&#x2F;获取到上传文件的名称</span><br><span class="line">                String FileName&#x3D;item.getName();</span><br><span class="line">                String uuid&#x3D;UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">                &#x2F;&#x2F;写入服务器端</span><br><span class="line">                item.write(new File(path,uuid+&quot;_&quot;+FileName));</span><br><span class="line">                &#x2F;&#x2F;删除临时文件</span><br><span class="line">                item.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于解析文件稍微有些麻烦，所以我决定用springmvc的文件解析器来处理文件的上传方式<br>这个是文件解析器的原理</p>
<img src="/2020/05/17/springmvc/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8E%9F%E7%90%86.bmp" class="" title="springmvc之文件上传">
<p>首先我们需要引入一个配置文件,注意：配置文件bean的id是固定的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">                &lt;!--配置最大上传的文件大小--&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;maxUploadSize&quot; value&#x3D;&quot;10485670&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>然后再Controller类的下面写处理,使用MultipartFile来加载文件类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;fileUpload1&quot;)</span><br><span class="line">    public String fileUpload1(HttpServletRequest request, MultipartFile upload) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;文件输出&quot;);</span><br><span class="line">        String path &#x3D; request.getSession().getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File file &#x3D; new File(path);</span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;说明上传的是文件项目</span><br><span class="line">        &#x2F;&#x2F;获取到上传文件的传统名称，即原来的名字</span><br><span class="line">        String FileName &#x3D; upload.getOriginalFilename();</span><br><span class="line">        String uuid &#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">        &#x2F;&#x2F;写入服务器端</span><br><span class="line">        upload.transferTo(new File(path, uuid + &quot;_&quot; + FileName));</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
</search>
