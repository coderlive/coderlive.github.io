<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/06/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>/go</title>
    <url>/2020/04/19/go/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>/css</title>
    <url>/2020/04/19/css/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambada表达式</title>
    <url>/2020/07/30/java/Lambada%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="Lambada表达式"><a href="#Lambada表达式" class="headerlink" title="Lambada表达式"></a>Lambada表达式</h2><blockquote>
<p>Lambada表达式是Java 8的重要更新，也是一个被广大开发者期待已久的新特性。Lambada表达式支持将代码块作为方法参数，Lambada表达式允许使用更简洁的代码来创建只有一个抽象方法的接口(这种接口被称为函数式接口)的实例。</p>
</blockquote>
<h4 id="Lambada表达式的主要作用就是代替匿名内部类的烦琐语法。它由三部分组成。"><a href="#Lambada表达式的主要作用就是代替匿名内部类的烦琐语法。它由三部分组成。" class="headerlink" title="Lambada表达式的主要作用就是代替匿名内部类的烦琐语法。它由三部分组成。"></a>Lambada表达式的主要作用就是代替匿名内部类的烦琐语法。它由三部分组成。</h4><ul>
<li>形参列表。形参列表允许省略形参类型。如果形参列表中只有一个参数。甚至连形参列表的圆括号也可以省略。</li>
<li>箭头 -&gt; 。必须通过英文中画线和大于符号组成。</li>
<li>代码块。如果代码块只包含一条语句，Lambda表达式允许省略代码块的花括号,那么这条语句就不要用花括号表示语句结束。Lambda代码块只有一条return语句，甚至可以省略return关键字。Lambda表达式需要返回值。Lambda表达式需要返回值，而它的代码块中仅有一条省略了return的语句，Lambda表达式会自动返回这条语句的值。</li>
</ul>
<p>下面程序示范了Lambda表达式的几种简化的写法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Eatable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">taste</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Flyable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">(String weather)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Addable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a , <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaQs</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="comment">// 调用该方法需要Eatable对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">(Eatable e)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(e);</span><br><span class="line">		e.taste();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 调用该方法需要Flyable对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drive</span><span class="params">(Flyable f)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"我正在驾驶："</span> + f);</span><br><span class="line">		f.fly(<span class="string">"【碧空如洗的晴日】"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 调用该方法需要Addable对象</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Addable add)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"5与3的和为："</span> + add.add(<span class="number">5</span>, <span class="number">3</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		LambdaQs lq = <span class="keyword">new</span> LambdaQs();</span><br><span class="line">		<span class="comment">// Lambda表达式的代码块只有一条语句，可以省略花括号。</span></span><br><span class="line">		lq.eat(()-&gt; System.out.println(<span class="string">"苹果的味道不错！"</span>));</span><br><span class="line">		<span class="comment">// Lambda表达式的形参列表只有一个形参，省略圆括号</span></span><br><span class="line">		lq.drive(weather -&gt;</span><br><span class="line">		&#123;</span><br><span class="line">			System.out.println(<span class="string">"今天天气是："</span> + weather);</span><br><span class="line">			System.out.println(<span class="string">"直升机飞行平稳"</span>);</span><br><span class="line">		&#125;);</span><br><span class="line">		<span class="comment">// Lambda表达式的代码块只有一条语句，省略花括号</span></span><br><span class="line">		<span class="comment">// 代码块中只有一条语句，即使该表达式需要返回值，也可以省略return关键字。</span></span><br><span class="line">		lq.test((a , b)-&gt;a + b);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lambda表达式简化了内部类需要new className(){}的复杂的写法，使代码变得更加的简洁，因此也受到了程序员们的青睐。Lambda表达式在实际上运行时会被当成一个任意类型的对象，到底当成何种环境，这取决于运行环境的需要。且使用Lambda表达式时必须要求被代替的匿名内部类只有一个抽象的方法</p>
<h4 id="Lambda表达式支持方法引用和构造器引用"><a href="#Lambda表达式支持方法引用和构造器引用" class="headerlink" title="Lambda表达式支持方法引用和构造器引用"></a>Lambda表达式支持方法引用和构造器引用</h4><table>
<thead>
<tr>
<th align="center">种类</th>
<th align="center">示例</th>
<th align="center">说明</th>
<th align="center">对应的Lambada表达式</th>
</tr>
</thead>
<tbody><tr>
<td align="center">引用方法类型</td>
<td align="center">类名::类方法</td>
<td align="center">函数式接口中被实现方法的全部参数给该类方法作为参数</td>
<td align="center">(a,b,…)-&gt;类名.类方法(a,b,…)</td>
</tr>
<tr>
<td align="center">引用特定对象的实例方法</td>
<td align="center">特定对象::实例方法</td>
<td align="center">函数式接口中被实现方法的全部参数传给该方法作为参数</td>
<td align="center">(a,b,…)-&gt;特定对象.实例方法</td>
</tr>
<tr>
<td align="center">引用某类对象的实例方法</td>
<td align="center">类名::实例方法</td>
<td align="center">函数式接口中被实现方法的第一个参数作为调用者，后面的参数全部传给该方法作为参数</td>
<td align="center">(a,b,…)-&gt;a.实例方法（b,…）</td>
</tr>
<tr>
<td align="center">引用构造器</td>
<td align="center">类名::new</td>
<td align="center">函数式接口中被实现方法的全部参数传给该构造器作为参数</td>
<td align="center">(a,b,…)-&gt;new 类名(a,b,…)</td>
</tr>
</tbody></table>
<h4 id="Lambda-表达式与匿名内部类主要存在如下区别"><a href="#Lambda-表达式与匿名内部类主要存在如下区别" class="headerlink" title="Lambda 表达式与匿名内部类主要存在如下区别"></a>Lambda 表达式与匿名内部类主要存在如下区别</h4><ul>
<li>匿名内部类可为任意接口创建实例—-不管接口包含多少个抽象方法，只要匿名内部类实现所有的抽象方法即可：但Lambda表达式只能为函数式接口创建实例。</li>
<li>匿名内部类可以为抽象类甚至普通类创建实例：但Lambda表达式只能为函数式接口创建实例。</li>
<li>匿名内部类实现的抽象方法的方法体允许调用接口定义中的默认方法：但Lambda表达式的代码不允许调用接口中定义的默认方法。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java动态代理</title>
    <url>/2020/05/13/java/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2>java动态代理</h2>
&nbsp;&nbsp;&nbsp;&nbsp;今天我学习到了java动态代理的用法，刚好为了加强记忆，我便做了一份笔记。
<img src="/2020/05/13/java/java%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/%E4%BB%A3%E7%90%86.png" class="" title="java动态代理">
&nbsp;&nbsp;&nbsp;&nbsp;由上面的图我们可以知道，在以前，我们买东西的时候都是直接去和产家联系的。然而，现在我们已经很少能够直接和产家
联系了，都是由中间商来代理销售产品的，而中间商也相当于代理商。因为它代理了产家的产品，相应的产家有销售和售后功能，同样的，代理商也拥有
产家的功能。首先我们需要一个产家接口
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public interface IProducter &#123;</span><br><span class="line">    void saleProduct(float money);</span><br><span class="line">    void afterService(float money);</span><br><span class="line">&#125;</span><br><span class="line">并且需要它的一个实现类</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;生产者</span><br><span class="line">public class producter implements IProducter&#123;</span><br><span class="line">    public void saleProduct(float money)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;销售产品，并拿到&quot;+money);</span><br><span class="line">    &#125;</span><br><span class="line">    public void afterService(float money)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(&quot;提供售后服务&quot;+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
然后我们用一个类来模拟消费者
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;模拟一个消费者</span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">            newProxyInstance方法的参数:</span><br><span class="line">                ClassLoader:类加载器</span><br><span class="line">                    它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法</span><br><span class="line">                Class[]:字节码数组</span><br><span class="line">                    它是用于加载代理对象字节码的。和被代理对象有相同方法。固定写法</span><br><span class="line">                InvocationHandler:用于增强的代码</span><br><span class="line">                    它是让我们写如何代理。我们一般都是写一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的，</span><br><span class="line">                    此接口的实现类都是谁用谁写。</span><br><span class="line">          *&#x2F;</span><br><span class="line">        IProducter ip&#x3D; (IProducter) Proxy.newProxyInstance(IProducter.class.getClassLoader(), new Class[]&#123;IProducter.class&#125;, new InvocationHandler() &#123;</span><br><span class="line">            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">                Float returanValue&#x3D; (Float) args[0];</span><br><span class="line">                if(&quot;saleProduct&quot;.equals(method.getName()))</span><br><span class="line">                returanValue &#x3D; (Float) method.invoke(new producter(),returanValue*0.8f);</span><br><span class="line">                return returanValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        ip.saleProduct(2000);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下类我们来对动态代理在做一个总结：</p>
<h2>动态代理</h2>

<pre><code>特点:字节码随用随创建，随用随加载

作用:在不修改源码的基础上对方法增强

分类：

    基于接口的动态代理

    基于子类的动态代理

基于接口的动态代理

    涉及的类：Proxy

    提供者：JDK官方

如何创建对象：

    使用Proxy中的newProxyInstance()方法

创建代理类最少实现一个接口，如果没有则不能使用</code></pre>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java包的概念和基本用法</title>
    <url>/2020/06/15/java/Java%E5%8C%85%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Java包的概念和基本用法"><a href="#Java包的概念和基本用法" class="headerlink" title="Java包的概念和基本用法"></a>Java包的概念和基本用法</h2><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><blockquote>
<p>包：java程序组织文件的一种方式，实质上就是文件夹</p>
<p>功能：组织大型软件中输入众多的类，不同的类可以放到不同的包中，方便管理</p>
<ul>
<li>按项目的功能模块来划分包</li>
<li>相同名称的类可以放到不同的包中，解决命名冲突的问题</li>
<li>用package来定义包，要放在代码中的非注释的第一句</li>
</ul>
</blockquote>
<h2 id="JDK中提供导入包的方法"><a href="#JDK中提供导入包的方法" class="headerlink" title="JDK中提供导入包的方法"></a>JDK中提供导入包的方法</h2><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><blockquote>
<p>import：导入另一个包中的类</p>
<ul>
<li>同一个包中的类不需要导入</li>
<li>其他包中的类，有两种方式：<ul>
<li>使用类全名来导入，如：java.util.Data=new Data()</li>
<li>使用import导入，如:import java.util.Data;</li>
</ul>
</li>
<li>java中默认会自动导入java.lang包</li>
<li>可以使用通配符导入同一个包中的所有类:<ul>
<li>import java.util.*  *代表所有的意思</li>
</ul>
</li>
<li>包的导入并不是迭代的，它只会导入这个包所在路径下的所有类，并不会导入它子包的所有类</li>
</ul>
</blockquote>
<h3 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h3><p>导入类的静态成员（属性、方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  <span class="keyword">static</span> java.lang.Integer.parseInt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseInt</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a=parseInt(<span class="string">"10"</span>);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h1><h2 id="修饰类的访问权限修饰符"><a href="#修饰类的访问权限修饰符" class="headerlink" title="修饰类的访问权限修饰符"></a>修饰类的访问权限修饰符</h2><ul>
<li><p>public</p>
<p>公有的，在哪里都可以使用</p>
</li>
<li><p>什么也不写</p>
<p>默认的，只能在本包中访问</p>
</li>
</ul>
<h2 id="修饰类的成员的访问权限修饰符"><a href="#修饰类的成员的访问权限修饰符" class="headerlink" title="修饰类的成员的访问权限修饰符"></a>修饰类的成员的访问权限修饰符</h2><p>类的成员:</p>
<ul>
<li>属性</li>
<li>方法</li>
<li>构造函数</li>
<li>初始化块</li>
</ul>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>本类</th>
<th>本包</th>
<th>子类</th>
<th>任何地方</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>✔</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>default</td>
<td>✔</td>
<td>✔</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>protected</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>❌</td>
</tr>
<tr>
<td>public</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
<td>✔</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>/html</title>
    <url>/2020/04/19/html/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>java环境配置</title>
    <url>/2020/06/02/java/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="Java环境配置详解"><a href="#Java环境配置详解" class="headerlink" title="Java环境配置详解"></a>Java环境配置详解</h2><p>   初学者在使用Java时，常常需要配置JAva的运行环境，首先我们需要去oracle官方去下载JavaJDK1.8版本的安装包,<br>然后双击打开安装包安装,一直next下去就可以安装好Java的环境了。<br>   接下来我们就要开始配置环境变量了,如果是Win10操作系统，根据以下配置即可:<br>   右键此电脑-&gt;选择属性-&gt;高级系统设置-&gt;环境变量-&gt;在系统变量下配置环境</p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步:"></a>第一步:</h4>   <img src="/2020/06/02/java/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/1.png" class="" title="java环境配置">
<h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步:"></a>第二步:</h4>   <img src="/2020/06/02/java/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/2.png" class="" title="java环境配置">
<h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步:"></a>第三步:</h4><pre><code>在系统变量中点击新建   </code></pre><ul>
<li>变量名:JAVA_HOME</li>
<li>变量值:C:\Program Files\Java\jdk1.8.0_161(根据需要选择你安装时的jdk版本的文件路径)</li>
</ul>
<h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步:"></a>第四步:</h4><pre><code>在path环境中添加以下配置    </code></pre><ul>
<li>变量名:Path</li>
<li>变量值:%JAVA_HOME%\bin</li>
</ul>
<h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步:"></a>第五步:</h4><pre><code>在系统变量中点击新建   </code></pre><ul>
<li>变量名:CLASS_PATH</li>
<li>变量值:.;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\lib\dt.jar(jdk1.5版本以上不用配置，它会默认配置，如果自己配置了，写错了就是多次一举)</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java陷阱之重写私有方法</title>
    <url>/2020/04/19/java/java%E9%99%B7%E9%98%B1%E4%B9%8B%E9%87%8D%E5%86%99%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>当我们有时候写JAVA代码的时候可能会天真的使用下面的写法，<br>你会发现你所写的方法是错误的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package polymorphism;</span><br><span class="line"></span><br><span class="line">public class PrivateOverride &#123;</span><br><span class="line">    private void f() &#123;</span><br><span class="line">        System.out.println(&quot;private f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PrivateOverride po &#x3D; new Derived();</span><br><span class="line">        po.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Derived extends PrivateOverride &#123;</span><br><span class="line">    public void f() &#123;</span><br><span class="line">        System.out.println(&quot;public f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private f()</span><br></pre></td></tr></table></figure>
<p>你可能期望输出是 public f()，然而 private 方法可以当作是 final 的，<br>对于派生类来说是隐蔽的。因此，这里 Derived 的 f() 是一个全新的方法；<br>因为基类版本的 f() 屏蔽了 Derived ，因此它都不算是重写方法。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java面向对象的概念</title>
    <url>/2020/06/14/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="面向对象的概念"><a href="#面向对象的概念" class="headerlink" title="面向对象的概念"></a>面向对象的概念</h1><h2 id="面向对象和面向过程的区别"><a href="#面向对象和面向过程的区别" class="headerlink" title="面向对象和面向过程的区别"></a>面向对象和面向过程的区别</h2><ul>
<li><p>面向过程</p>
<p>c语言，研究的是怎么做，即how，即具体的实现步骤、实现细节。</p>
<p>如何把大象装冰箱？</p>
<p>1.把冰箱门打开</p>
<p>2.把大象装冰箱</p>
<p>3.把冰箱门关上</p>
</li>
<li><p>面向对象</p>
<p>研究的是做什么，what.至于怎么做，封装到方法中，方法内部是面向过程..对外只需要提供的一个，别人直接调用，调用者并不考虑细节。</p>
<p>面向对象编程时实现过程一般是：</p>
<p>1.创建一个类Person</p>
<p>2.使用类来创建一个对象 Person person=new Person()</p>
<p>3.调用对象的方法 person.把大象装冰箱()</p>
</li>
</ul>
<hr>
<h1 id="面向对象编程思想"><a href="#面向对象编程思想" class="headerlink" title="面向对象编程思想"></a>面向对象编程思想</h1><p>模拟现实世界，一个程序就是一个世界</p>
<h1 id="类和对象的概念"><a href="#类和对象的概念" class="headerlink" title="类和对象的概念"></a>类和对象的概念</h1><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象:模拟显示时间中的具体的事务</p>
<table>
<thead>
<tr>
<th>现实世界</th>
<th>编程世界</th>
</tr>
</thead>
<tbody><tr>
<td>具体的学生</td>
<td>学生对象</td>
</tr>
<tr>
<td>具体的笔记本</td>
<td>笔记本对象</td>
</tr>
</tbody></table>
<p>对象有属性和方法</p>
<p>属性：学生对象的属性,学号，姓名，性别，年龄…</p>
<p>方法:描述对象的行为，吃饭，睡觉，学习，考试…</p>
<p>汽车的属性：品牌，型号，排量….</p>
<p>汽车的行为:前进，后退，刹车，拐弯，刹车，漂移….</p>
<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类：相同属性和相同操作(行为)的对象的集合…</p>
<p>借鉴了现实世界中这种归类的思想，现实世界中把若干学生对象归为一类，统称为学生类，</p>
<p>编程世界中就有一个学生类。</p>
<ul>
<li>类是对象的抽象、是对象的模板，对象是类的实例…</li>
<li>一个类可以创建多个对象</li>
</ul>
<h2 id="面向对象的好处"><a href="#面向对象的好处" class="headerlink" title="面向对象的好处"></a>面向对象的好处</h2><p>面向对象相当于活字印刷,面向过程相当于雕版印刷…</p>
<p>优点:</p>
<blockquote>
<ol>
<li><p>可复用</p>
<p>每个活字都是一个可以复用的类..抽象出来，可以重复使用，复用类来创建对象类(活字版)  对象（活字印到纸上的字就是对象）</p>
</li>
<li><p>可维护</p>
<p>只需要修改少量的字，不需要大量的修改，甚至推倒重来…体现了可维护的思想</p>
</li>
<li><p>可扩展</p>
<p>雕版印刷不能加字，活字印刷可以继续添加字 添加功能 体现了可扩展</p>
</li>
<li><p>灵活性强</p>
</li>
</ol>
</blockquote>
<h1 id="对象之间的关系"><a href="#对象之间的关系" class="headerlink" title="对象之间的关系"></a>对象之间的关系</h1><p>现实世界中，事物之间必然有千丝万缕的联系，编程世界中，对象之间也有对应的关系</p>
<h2 id="一、关联关系"><a href="#一、关联关系" class="headerlink" title="一、关联关系"></a>一、关联关系</h2><p>模拟现实世界中最基本的关系</p>
<ul>
<li><p>关联有方向性</p>
<ul>
<li><p>单项关联</p>
<p>我———&gt;学生</p>
</li>
<li><p>我———–学生</p>
</li>
</ul>
</li>
<li><p>关联有多重性</p>
<ul>
<li>一对一<ul>
<li>人和身份证</li>
</ul>
</li>
<li>一对多<ul>
<li>学院和学生</li>
</ul>
</li>
<li>多对多<ul>
<li>学生和课程</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="关联关系的两个特例"><a href="#关联关系的两个特例" class="headerlink" title="关联关系的两个特例"></a>关联关系的两个特例</h3><p>聚合和组合是部分和整体之间的关系</p>
<ul>
<li>聚合<ul>
<li>部分可以属于多个整体叫做聚合…  </li>
<li>学生和球队(一个学生既可以参加篮球队，也可以参加足球队)</li>
<li>部分和整体声明周期不一致</li>
<li>在UML图中（统一建模语言，用图来表示，方便程序员沟通、交流），聚合使用空心菱形表示，空心菱形所在位置是整体</li>
</ul>
</li>
<li>组合<ul>
<li>部分只能属于一个整体</li>
<li>汽车和发动机，人和四肢、脑袋、身体、部分</li>
<li>在UML图中使用实心菱形所在的位置表示</li>
</ul>
</li>
</ul>
<hr>
<p>常见的UML工具：StarUML、rational rose 、visio、在线工具processOn等</p>
<h2 id="二、继承关系"><a href="#二、继承关系" class="headerlink" title="二、继承关系"></a>二、继承关系</h2><h2 id="三、实现关系"><a href="#三、实现关系" class="headerlink" title="三、实现关系"></a>三、实现关系</h2><h2 id="四、依赖关系"><a href="#四、依赖关系" class="headerlink" title="四、依赖关系"></a>四、依赖关系</h2><p>类B发生了改变，类A跟着变，说明类A依赖于类B</p>
<h1 id="使用现有类创建对象"><a href="#使用现有类创建对象" class="headerlink" title="使用现有类创建对象"></a>使用现有类创建对象</h1><p>类名 对象名的引用名=new 类名();</p>
<ul>
<li>String s1=new String(“Hello World”);</li>
<li>Integer a =new Integer(1);</li>
<li>Object o=new Object();</li>
</ul>
<p>Object 是java中所有类的父类</p>
<h2 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h2><p>面向对象语言的三大特性:</p>
<ul>
<li>封装<ul>
<li>把属性和方法放到类体中叫做封装，封装成一个类</li>
<li>把若干代码放到方法中，封装成一个方法。</li>
<li>为了保证属性信息的隐蔽和安全，属性通常加上一个修饰符private</li>
<li>对于方法而言，要使用public来修饰,方法通常写完以后是想提供给别人使用，为了让别人使用你写好的方法，方法需要使用public来修饰</li>
</ul>
</li>
<li>多态</li>
<li>继承</li>
</ul>
<h2 id="setters和getters方法"><a href="#setters和getters方法" class="headerlink" title="setters和getters方法"></a>setters和getters方法</h2><ul>
<li><p><strong>setters</strong></p>
<p>给别人提供修改私有属性的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWord</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> a;</span><br><span class="line">  <span class="keyword">private</span> String str;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.str = str;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p><strong>getters</strong></p>
<p>给别人提供访问私有属性的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiWord</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String str;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="对象的内存模型"><a href="#对象的内存模型" class="headerlink" title="对象的内存模型"></a>对象的内存模型</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><ul>
<li><p>定义：一个特殊的函数，也叫作构造方法，英文Constructor，用于为对象的属性进行初始化</p>
<p>特点：</p>
<ul>
<li>与类同名</li>
<li>没有返回值（返回值的位置连void也不写）</li>
<li>构造函数可以有多个，构造对象时，会根据参数调用对应的构造函数，这叫做方法的重载</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String sex;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不写构造函数时便会自动创建这种形式的默认构造函数</span></span><br><span class="line">    <span class="comment">//当写了任何一个构造函数后，系统便不会再提供默认的构造函数</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name , <span class="keyword">int</span> age )</span></span>&#123;</span><br><span class="line">    thsi.age = age;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name , <span class="keyword">int</span> age ,String sex)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</li>
</ul>
<ul>
<li><p>构造函数没有返回值的实质</p>
<p> 构造函数实际上是有返回值的，返回的是刚刚创建的对象的引用</p>
</li>
</ul>
<h2 id="对象初始化块"><a href="#对象初始化块" class="headerlink" title="对象初始化块"></a>对象初始化块</h2><p>作用:和构造函数完全一样的，在构造函数之前执行，可以减少构造函数初始化的冗余问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"代码块中的初始化"</span>);</span><br><span class="line">        sex=<span class="string">"男"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"一个参数的构造函数"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我在吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student=<span class="keyword">new</span> Student(<span class="string">"faker"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="对象初始化过程的总结"><a href="#对象初始化过程的总结" class="headerlink" title="对象初始化过程的总结"></a>对象初始化过程的总结</h1><blockquote>
<ol>
<li><p>为对象的实例分配空间，同时默认初始化</p>
</li>
<li><p>声明时初始化和对象初始化块初始化</p>
<p>按照从上到下写代码的顺序执行</p>
</li>
<li><p>构造函数初始化</p>
</li>
</ol>
</blockquote>
<h2 id="this指针"><a href="#this指针" class="headerlink" title="this指针"></a>this指针</h2><blockquote>
<p>指向自己的指针(存的就是刚刚创建出来的对象的地址)</p>
</blockquote>
<ul>
<li><p>用在构造函数中</p>
<p>指向的是正在初始化的对象</p>
</li>
<li><p>用在方法中</p>
<p>指向的是正在调用该方法的对象</p>
</li>
<li><p>用在构造函数中</p>
</li>
</ul>
<p>​       调用其他构造函数，注意的是调用其他的构造函数的时候必须写在第一位，不然的话编译器会报错。</p>
<h1 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h1><blockquote>
<p>方法名称相同、参数不同的方法之间叫做重载，其中参数不同包括以下三种情况：</p>
<ul>
<li>参数的数量不同</li>
<li>参数的类型不同</li>
<li>参数的顺序不同</li>
</ul>
</blockquote>
<hr>
<blockquote>
<p>仅返回值不同的方法不叫重载方法：</p>
<p>为什么只有返回值不同的方法不叫重载：</p>
<ul>
<li>其实重载的方法之间并没有任何关系，只是碰巧名称相同罢了。</li>
</ul>
<p>既然方法名称相同，在使用相同的名称调用方法时，编译器怎么调用哪个方法呢？</p>
<ul>
<li><p>考传入参数的不同确定调用哪个方法</p>
</li>
<li><p>如果只有返回值不同时，编译会出现Duplicate method错误.编译时认为它是重复的方法。</p>
</li>
</ul>
<p>  重载也叫做静态联编(静态绑定)</p>
</blockquote>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>maven引入log4j文件</title>
    <url>/2020/05/06/maven/maven/</url>
    <content><![CDATA[<p>在maven中使用log4j时还需要引入下面的坐标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h3>配置log4j</h3>
Appender 为日志输出目的地，Log4j提供的appender有以下几种：
org.apache.log4j.ConsoleAppender（控制台），
org.apache.log4j.FileAppender（文件），
org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

<p>Layout：日志输出格式，Log4j提供的layout有以下几种：<br>org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br>org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>
<p>打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:<br>　　%m 输出代码中指定的消息<br>　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>　　%r 输出自应用启动到输出该log信息耗费的毫秒数<br>　　%c 输出所属的类目，通常就是所在类的全名<br>　　%t 输出产生该日志事件的线程名<br>　　%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”<br>　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日 22 ： 10 ： 28 ， 921<br>　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )</p>
<h4>log4j.properties</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### set log levels ###</span><br><span class="line">log4j.rootLogger &#x3D; DEBUG,Console,File</span><br><span class="line">###  输出到控制台  ###</span><br><span class="line">log4j.appender.Console&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.Target&#x3D;System.out</span><br><span class="line">log4j.appender.Console.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern&#x3D; %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line">### 输出到日志文件 ###</span><br><span class="line">log4j.appender.File&#x3D;org.apache.log4j.RollingFileAppender </span><br><span class="line">log4j.appender.File.File&#x3D;$&#123;project&#125;&#x2F;WEB-INF&#x2F;logs&#x2F;app.log</span><br><span class="line">log4j.appender.File.DatePattern&#x3D;_yyyyMMdd&#39;.log&#39;</span><br><span class="line">log4j.appender.File.MaxFileSize&#x3D;10MB</span><br><span class="line">log4j.appender.File.Threshold&#x3D;ALL</span><br><span class="line">log4j.appender.File.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.File.layout.ConversionPattern&#x3D;[%p][%d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125;][%c]%m%n</span><br></pre></td></tr></table></figure>
<h3>使用log4j</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.xwx.text;</span><br><span class="line"></span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">	</span><br><span class="line">	private static Logger log &#x3D; Logger.getLogger(Test.class.getClass());</span><br><span class="line">	@Test</span><br><span class="line">	public void testLog()&#123;</span><br><span class="line">		log.debug(&quot;debug&quot;);</span><br><span class="line">		log.error(&quot;error&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>/js</title>
    <url>/2020/04/19/js/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis运行流程</title>
    <url>/2020/04/19/mybatis/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MyBatis的整个运行流程，也是紧紧围绕着数据库连接池配置文件MyBatisConfig.xml(一般按个人<br>喜好来命名，但规范命名比较好)，以及SQL映射配置文件Mapper.xml而开展的。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先SqlSessionFactory会话工厂会通过Resources资源信息加载对象获取MyBatisConfig.xml配置<br>文件信息,然后生产可以与数据库进行交互会话实例类SqlSession。会话实例类SqlSession可以根据Mapper配置文件<br>中的SQL配置，去执行相应的增删改查操作。而在SQLSession类内部，是通过执行器Executor(分为基本执行器和缓存<br>执行器)对数据库进行操作的。执行器Executor与数据库交互，依靠的是底层封装对象Mappered Statement，它封装了<br>从Mapper文件中读取的信息（包括SQL语句、输入参数、输出结果类型）。通过执行器Executor与底层封装对象MapperedStatement的结合，MyBatis就实现了与数据库进行交互的功能。<br>  Mybatis运行流程结构如下图所示：</p>
<img src="/2020/04/19/mybatis/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png" class="" title="MyBatis运行流程">]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis缓存机制</title>
    <url>/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2>一级缓存的工作原理如下图所示：</h2>
<img src="/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png" class="" title="MyBatis缓存机制">
&nbsp;&nbsp;&nbsp;&nbsp;该图阐述了一个SqlSession类的实例对象下的一级缓存的工作原理。当第一次查询id为1
的用户时，sqlSession首先到一级缓存区域查询，如果没有相关数据，则会到数据库中去查询。然后sqlSession将该
查询结果保存到一级缓存区域。在下一次查询的时候，如果sqlSession执行了commit查询操作（即执行了修改、添加
和删除），则会清空它的一级缓存区域，以此来保证缓存中的信息时最新的，避免脏读现象发生。如果期间sqlSession
一直没有执行commit操作修改数据，那么下一次查询id为1的用户信息时，sqlSession在一级缓存中就会发现该信息，
然后从缓存中获取用户信息。
<h2>二级缓存原理</h2>
&nbsp;&nbsp;&nbsp;&nbsp;由上可知，一级缓存时基于同一个SqlSession类的实例对象的。但是，有些时候在Web工程
中会将执行查询操作的方法封装在一个Service方法中，当执行完一次后，Service方法结束，此时SqlSession类的实例
对象就会关闭，一级缓存就会被清空。此时若再次调用Service方法查询同一个信息时，会新打开一个SqlSession类的实
例对象，由于一级缓存已经被清空，所以执行再次访问数据库，并将查询的数据再次放入缓存中。
&nbsp;&nbsp;&nbsp;&nbsp;为了解决这个问题，Mybatis引入了二级缓存。Mybatis的二级缓存存在于Mapper实例中，当
多个SqlSession类的实例对象加载Mapper进行查询时，会先去Mapper的缓存区域寻找该值，若不存在，则去数据库中查询，
然后将查询出来的结果存储到缓存区域，待下次查询相同数据时，从缓存区域中获取。当某个Sqlsession类的实例对象执行
了增、删、改等改变数据的操作时，Mapper实例都会清空二级缓存。
<img src="/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.png" class="" title="MyBatis缓存机制">
<h2>Mybatis的一级缓存和二级缓存执行顺序</h2>
1、先判断二级缓存是否开启，如果没开启，再判断一级缓存是否开启，如果没开启，直接查数据库

<p>2、如果一级缓存关闭，即使二级缓存开启也没有数据，因为二级缓存的数据从一级缓存获取</p>
<p>3、一般不会关闭一级缓存</p>
<p>4、二级缓存默认不开启</p>
<p>5、如果二级缓存关闭，直接判断一级缓存是否有数据，如果没有就查数据库</p>
<p>6、如果二级缓存开启，先判断二级缓存有没有数据，如果有就直接返回；如果没有，就查询一级缓存，如果有就返回，没有就查询数据库；</p>
<p>==》综上：先查二级缓存，再查一级缓存，再查数据库；即使在一个sqlSession中，也会先查二级缓存；一个namespace中的查询更是如此；</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>/spring</title>
    <url>/2020/04/19/spring/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springAOPxml配置</title>
    <url>/2020/05/14/spring/springAOPxml%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2>AOP相关术语</h2>

<p>Joinpoint(连接点): 所谓连接点是指那些被拦截到的点。在spring中,这些点指的是方法,因为spring只支持方法类型的连接点。<br>Pointcut(切入点): 所谓切入点是指我们要对哪些Joinpoint进行拦截的定义。<br>Advice(通知/增强): 所谓通知是指拦截到Joinpoint之后所要做的事情就是通知。<br>通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。<br>Introduction(引介): 引介是一种特殊的通知在不修改类代码的前提下, Introduction可以在运行期为类动态地添加一些方法或Field。 Target(目标对象): 代理的目标对象。<br>Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。<br>spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。<br>Proxy（代理）: 一个类被AOP织入增强后，就产生一个结果代理类。<br>Aspect(切面): 是切入点和通知（引介）的结合。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;使用springaop时我们要导入下面的约束</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<h2>配置步骤</h2>
<h3>第一步：把通知类用bean标签配置起来</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;&lt;!-- 配置通知 --&gt; </span><br><span class="line">&lt;bean id&#x3D;&quot;txManager&quot; class&#x3D;&quot;com.theqin.utils.TransactionManager&quot;&gt; </span><br><span class="line">    &lt;property name&#x3D;&quot;dbAssit&quot; ref&#x3D;&quot;dbAssit&quot;&gt;&lt;&#x2F;property&gt; </span><br><span class="line">&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>

<h3>第二步：使用aop:config声明aop配置</h3>

<pre><code>aop:config: 作用：用于声明开始aop的配置 
&lt;aop:config&gt;&lt;/aop:config&gt;</code></pre><h3>第三步：使用aop:config声明aop配置</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;aop:aspect: 作用： 用于配置切面。 属性： id：给切面提供一个唯一标识。 ref：引用配置好的通知类bean的id。 </span><br><span class="line">&lt;aop:aspect id&#x3D;&quot;txAdvice&quot; ref&#x3D;&quot;txManager&quot;&gt; </span><br><span class="line">&#x2F;&#x2F;&lt;!--配置通知的类型要写在此处--&gt;</span><br><span class="line"> &lt;&#x2F;aop:aspect&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>

<h3>第四步：使用aop:pointcut配置切入点表达式</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;aop:pointcut： </span><br><span class="line">&#x2F;&#x2F;作用： 用于配置切入点表达式。就是指定对哪些类的哪些方法进行增强。 </span><br><span class="line">&#x2F;&#x2F;属性： expression：用于定义切入点表达式。 id：用于给切入点表达式提供一个唯一标识 </span><br><span class="line">&lt;aop:pointcut expression&#x3D;&quot;execution( public void com.theqin.service.impl.AccountServiceImpl.transfer( ..) )&quot; </span><br><span class="line">id&#x3D;&quot;pt1&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<h2>关于expression表达式的用法</h2>

<pre><code>关键字:execution(表达式)
表达式:
      访问修饰符(可以省略) 返回值 包名.包名.包名...类名.方法名(参数方法)
标准的表达式写法:
      public void com.theqin.service.impl.AccountServiceImpl.saveAccount()
      返回值可以使用通配符,表示任意返回值:
        * com.theqin.service.impl.AccountServiceImpl.saveAccount()
      包名可以用通配符,表示任意包。但是有几级包就写几个*
        * *.*.*.*.*.saveAccount()
      包名可以使用..表示当前包及其字包
        * *..*.saveAccount()
      类名和方法名都可以用通配符来替代
        * *..*.*()
      当方法中有参数时可以用..来替代
        * *..*.*(..)  这时候的表达式表示一个全统配符，可以匹配所有的类</code></pre>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM三大框架整合</title>
    <url>/2020/05/19/spring/SSM%E4%B8%89%E5%A4%A7%E6%A1%86%E6%9E%B6%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>学习SSM三大框架之后，我们就需要自己对三大框架进行整合，然而三大框架的整合还是有一定的难度的，为了加强记忆，我把整合过程中一些<br>需要的配置给记录下来，以方便以后需要的时候能够更加快速有效的获取到。<br>因为SSM是基于Maven来创建项目的,因此我们需要引入响应的依赖包才能更好的运行程序，所以这里给出了整合所需要的依赖坐标。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--版本锁定--&gt;</span><br><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;spring.version&gt;5.0.2.RELEASE&lt;&#x2F;spring.version&gt;</span><br><span class="line">    &lt;slf4j.version&gt;1.6.6&lt;&#x2F;slf4j.version&gt;</span><br><span class="line">    &lt;log4j.version&gt;1.2.12&lt;&#x2F;log4j.version&gt;</span><br><span class="line">    &lt;mysql.version&gt;5.1.6&lt;&#x2F;mysql.version&gt;</span><br><span class="line">    &lt;mybatis.version&gt;3.4.5&lt;&#x2F;mybatis.version&gt;</span><br><span class="line">  &lt;&#x2F;properties&gt;</span><br><span class="line"></span><br><span class="line">  &lt;dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--spring的aop所需要的依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.aspectj&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;aspectjweaver&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.6.8&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--spring aop依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-aop&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--spring核心包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-context&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--springweb所需要的jar包依赖--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-web&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-webmvc&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-test&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--spring的事务管理包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-tx&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--spring的jdbctemplate包，可以不引用--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-jdbc&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;spring.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--单元测试包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;junit&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;4.12&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;mysql.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--servlet包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;servlet-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.5&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--jsp--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;javax.servlet.jsp&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jsp-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.0&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;scope&gt;provided&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;jstl&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jstl&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.2&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--日志文件--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;log4j.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-api&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;slf4j.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--日志所需jar包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.slf4j&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;slf4j-log4j12&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;slf4j.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--mybatis jar包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;$&#123;mybatis.version&#125;&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--mybatis和spring整合需要的jar包--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;mybatis-spring&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;1.3.0&lt;&#x2F;version&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">    &lt;!--数据库连接池--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;c3p0&lt;&#x2F;groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;c3p0&lt;&#x2F;artifactId&gt;</span><br><span class="line">      &lt;version&gt;0.9.1.2&lt;&#x2F;version&gt;</span><br><span class="line">      &lt;type&gt;jar&lt;&#x2F;type&gt;</span><br><span class="line">      &lt;scope&gt;compile&lt;&#x2F;scope&gt;</span><br><span class="line">    &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>然后我们需要配置spring和mybatis整合的核心配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">	http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">	http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">	http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">	http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">	http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">	http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">	http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd&quot;&gt;</span><br><span class="line">    &lt;!--开启注解的扫描，希望处理service和dao，controller，不需要spring框架去处理--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;cn.itcast.service&quot;&gt;</span><br><span class="line">        &lt;!--配置哪些注解不扫描,springmvc希望自己处理自己的注解，所以不需要扫描--&gt;</span><br><span class="line">        &lt;context:exclude-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&gt;&lt;&#x2F;context:exclude-filter&gt;</span><br><span class="line">    &lt;&#x2F;context:component-scan&gt;</span><br><span class="line">    &lt;!--spring去整合mybatis的框架--&gt;</span><br><span class="line">    &lt;!--配置连接池--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;dataSource&quot; class&#x3D;&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;driverClass&quot; value&#x3D;&quot;com.mysql.jdbc.Driver&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;jdbcUrl&quot; value&#x3D;&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;ssm&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;user&quot; value&#x3D;&quot;root&quot;&#x2F;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;password&quot; value&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--配置sqlsessionfactory的工厂对象--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;factoryBean&quot; class&#x3D;&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--配置accountdao接口所在的包--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;mapperScannerConfigurer&quot; class&#x3D;&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;basePackage&quot; value&#x3D;&quot;cn.itcast.dao&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--配置一个事务--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;tx&quot; class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;tx&quot;&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;find*&quot; read-only&#x3D;&quot;true&quot;&#x2F;&gt;</span><br><span class="line">            &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot;&gt;&lt;&#x2F;tx:method&gt;</span><br><span class="line">        &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">    &lt;&#x2F;tx:advice&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut&#x3D;&quot;execution(* cn.itcast.service.Impl.*.*(..))&quot;&gt;&lt;&#x2F;aop:advisor&gt;</span><br><span class="line">    &lt;&#x2F;aop:config&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<p>又因为spring是要在web运行时加载的，所以我们需要在spring中加入一个监听器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;listener&gt;</span><br><span class="line">   &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line"> &lt;&#x2F;listener&gt;</span><br><span class="line"> &lt;context-param&gt;</span><br><span class="line">   &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">   &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;</span><br><span class="line"> &lt;&#x2F;context-param&gt;</span><br></pre></td></tr></table></figure>
<p>接着需要自己手动写一个springmvc的配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;!--开启注解扫描，之扫描controller注解--&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;cn.itcast&quot;&gt;</span><br><span class="line">        &lt;context:include-filter type&#x3D;&quot;annotation&quot; expression&#x3D;&quot;org.springframework.stereotype.Controller&quot;&gt;&lt;&#x2F;context:include-filter&gt;</span><br><span class="line">    &lt;&#x2F;context:component-scan&gt;</span><br><span class="line">    &lt;!--配置视图解析器--&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;viewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;pages&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;!--配置不拦截静态资源--&gt;</span><br><span class="line">    &lt;mvc:resources mapping&#x3D;&quot;&#x2F;css&#x2F;**&quot; location&#x3D;&quot;&#x2F;css&#x2F;&quot;&gt;&lt;&#x2F;mvc:resources&gt;</span><br><span class="line">    &lt;mvc:resources mapping&#x3D;&quot;&#x2F;js&#x2F;**&quot; location&#x3D;&quot;&#x2F;js&#x2F;&quot;&gt;&lt;&#x2F;mvc:resources&gt;</span><br><span class="line">    &lt;mvc:resources mapping&#x3D;&quot;&#x2F;img&#x2F;**&quot; location&#x3D;&quot;&#x2F;img&#x2F;&quot;&gt;&lt;&#x2F;mvc:resources&gt;</span><br><span class="line">    &lt;!--开启mvc注解支持--&gt;</span><br><span class="line">    &lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br><span class="line">    &lt;!--srping框架整合springmvc--&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
<p>因此我们总结一下，web.xml的配置应该这样来写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line"> &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;filter&gt;</span><br><span class="line">    &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">      &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">  &lt;&#x2F;filter&gt;</span><br><span class="line">  &lt;filter-mapping&gt;</span><br><span class="line">    &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;filter-mapping&gt;</span><br><span class="line">  &lt;!--配置spring监听器,会加载spring的配置文件,默认只会去加载WEB-INF下的文件,他会把所有类有注解的东西全部加入springioc容器中--&gt;</span><br><span class="line">  &lt;listener&gt;</span><br><span class="line">    &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;&#x2F;listener-class&gt;</span><br><span class="line">  &lt;&#x2F;listener&gt;</span><br><span class="line">  &lt;context-param&gt;</span><br><span class="line">    &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;classpath:applicationContext.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">  &lt;&#x2F;context-param&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">      &lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot入门小案例</title>
    <url>/2020/05/19/springboot/springboot%E5%85%A5%E9%97%A8%E5%B0%8F%E6%A1%88%E4%BE%8B/</url>
    <content><![CDATA[<h3>1.创建一个maven工程(jar)</h3>

<h3>2.导入spring boot相关的依赖</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring‐boot‐starter‐parent&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.9.RELEASE&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;parent&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring‐boot‐starter‐web&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<h3>3.编写一个主程序,启动Spring Boot应用</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">* @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用</span><br><span class="line">*&#x2F;</span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class HelloWorldMainApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">&#x2F;&#x2F; Spring应用启动起来</span><br><span class="line">SpringApplication.run(HelloWorldMainApplication.class,args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3>4.编写相关的Controller</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">@ResponseBody</span><br><span class="line">@RequestMapping(&quot;&#x2F;hello&quot;)</span><br><span class="line">public String hello()&#123;</span><br><span class="line">return &quot;Hello World!&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3>5.运行主程序测试</h3>

<h3>6.简化部署</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!‐‐ 这个插件，可以将应用打包成一个可执行的jar包；‐‐&gt;</span><br><span class="line">&lt;build&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring‐boot‐maven‐plugin&lt;&#x2F;artifactId&gt;</span><br><span class="line">&lt;&#x2F;plugin&gt;</span><br><span class="line">&lt;&#x2F;plugins&gt;</span><br><span class="line">&lt;&#x2F;build&gt;</span><br></pre></td></tr></table></figure>
<p>将这个应用打成jar包，直接使用java -jar的命令进行执行</p>
]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot配置文件值获取</title>
    <url>/2020/05/21/springboot/springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%80%BC%E8%8E%B7%E5%8F%96/</url>
    <content><![CDATA[<h3>在springboot中我们有两种配置文件的方式:</h3>

<p>1.application.yml<br>2.application.properties<br>这两种方式都是可以放在一起使用时都是可以的，但是它们会相互的覆盖，所以使用其中一种就好了<br>有时候我们需要为一个实体类注入属性,这时候我们可以采用@ConfigurationProperties注解来获取配置文件中的值来注入属性值<br>下面我们先编写一个实体类，为了方便查看，我把get和set方法都省略了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.atguigu.springboot.bean;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line">@Component</span><br><span class="line">@ConfigurationProperties(prefix &#x3D; &quot;person&quot;)</span><br><span class="line">public class Person &#123;</span><br><span class="line">    private String lastName;</span><br><span class="line">    private Integer age;</span><br><span class="line">    private Boolean boss;</span><br><span class="line">    private Date birth;</span><br><span class="line">    private Map&lt;String,Object&gt; maps;</span><br><span class="line">    private List&lt;Object&gt; lists;</span><br><span class="line">    private Dog dog;</span><br><span class="line">public class Dog &#123;</span><br><span class="line">    private String name;</span><br><span class="line">    private String age;</span><br></pre></td></tr></table></figure>
<p>prefix = “person”表示的是会读取配置文件中前缀为person的配置并注入实体类对象</p>
<h2>接下来我们可以才用两种方式来书写配置文件</h2>

<h3>application.properties方式</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">person.age&#x3D;18</span><br><span class="line">person.birth&#x3D;1999&#x2F;8&#x2F;05</span><br><span class="line">person.boss&#x3D;false</span><br><span class="line">person.last-name&#x3D;李四</span><br><span class="line">person.maps.k1&#x3D;v1</span><br><span class="line">person.maps.k2&#x3D;v2</span><br><span class="line">person.lists&#x3D;a,v,c</span><br><span class="line">person.dog.name&#x3D;dog</span><br><span class="line">person.dog.age&#x3D;15</span><br></pre></td></tr></table></figure>
<p>其中我们要注意的是我们properties配置文件默认读取的时候不是中文编码，我们需要把在idea中把它设置读取为中文编码的格式点击<br>File-&gt;Setting-&gt;搜索File Encodings,在下面选项中选择UTF-8编码，并打勾右边的选框保存修改就可以了</p>
<img src="/2020/05/21/springboot/springboot%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%80%BC%E8%8E%B7%E5%8F%96/%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81.png" class="" title="springboot配置文件值获取">
<h3>application.yml方式</h3>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8081</span><br><span class="line"></span><br><span class="line">person:</span><br><span class="line">  lastName: zhangsan</span><br><span class="line">  age: 18</span><br><span class="line">  boss: false</span><br><span class="line">  birth: 2017&#x2F;12&#x2F;12</span><br><span class="line">  maps: &#123;k1: v1,k2: v2&#125;</span><br><span class="line">  lists:</span><br><span class="line">    - lisi</span><br><span class="line">    - zhaoliu</span><br><span class="line">    - faker</span><br><span class="line">  dog:</span><br><span class="line">    name: 小狗</span><br><span class="line">    age: 12</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring基于xml的事务配置</title>
    <url>/2020/05/15/spring/spring%E5%9F%BA%E4%BA%8Exml%E7%9A%84%E4%BA%8B%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2>spring基于xml的事务配置</h2>

<p>首先事务通知的配置需要一下的约束<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd&quot;&gt;</span><br><span class="line">        &lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure></p>
<p>1.配置事务管理器<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;transactionManager&quot;  class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">     &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line"> &lt;&#x2F;bean&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></p>
<p>2.配置事务的通知<br>            此时我们需要导入事务的约束，tx和aop的名称空间和约束<br>            使用tx:advice标签配置事务通知<br>                属性：<br>                    id:给事务通知起一个唯一标识<br>                    transaction-manager:给事务通知提供一个事务管理器引用<br>    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:advice&gt;</span><br></pre></td></tr></table></figure><br>3.配置AOP中的通用切入点表达式,建立事务通知和切入点表达式的对应关系在事务的通知tx:advice标签的内部,配置事务的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置事务的通知--&gt;</span><br><span class="line">&lt;tx:advice id&#x3D;&quot;txAdvice&quot; transaction-manager&#x3D;&quot;transactionManager&quot;&gt;</span><br><span class="line">    &lt;tx:attributes&gt;</span><br><span class="line">        &lt;!--</span><br><span class="line">        read-only&#x3D;用于指定事务是否只读，只有查询方法才能设置为true</span><br><span class="line">        propagation&#x3D;用于指定事务的传播行为。默认值使REQUIRED,表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。</span><br><span class="line">        isolation&#x3D;用于指定事务的隔离级别。默认使DEFAULT，表示使用数据库的默认隔离级别</span><br><span class="line">        no-rollback-for&#x3D;用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时。事务不回滚，没有默认值。不写时表示任何异常都回滚。</span><br><span class="line">        rollback-for&#x3D;用于指定一个异常，用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚，没有默认值。不写时表示任何异常都回滚</span><br><span class="line">        timeout&#x3D;用于指定事务的超时时间，默认值使-1表示永不超时，如果指定了数值，以秒为单位</span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;tx:method name&#x3D;&quot;*&quot; propagation&#x3D;&quot;REQUIRED&quot; read-only&#x3D;&quot;true&quot; &#x2F;&gt;</span><br><span class="line">        &lt;tx:method name&#x3D;&quot;find*&quot; propagation&#x3D;&quot;SUPPORTS&quot; read-only&#x3D;&quot;false&quot;&gt;&lt;&#x2F;tx:method&gt;&lt;!--优先级大于上方--&gt;</span><br><span class="line">    &lt;&#x2F;tx:attributes&gt;</span><br><span class="line">&lt;&#x2F;tx:advice&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:pointcut id&#x3D;&quot;pt1&quot; expression&#x3D;&quot;execution(* com.itheima.service.impl.AccountServiceImpl.*(..))&quot;&gt;&lt;&#x2F;aop:pointcut&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref&#x3D;&quot;txAdvice&quot; pointcut-ref&#x3D;&quot;pt1&quot;&gt;&lt;&#x2F;aop:advisor&gt;</span><br><span class="line">&lt;&#x2F;aop:config&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring注解笔记</title>
    <url>/2020/04/19/spring/spring%E6%B3%A8%E8%A7%A3%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2>spring注解详解</h2>
&nbsp;&nbsp;&nbsp;&nbsp;spring注解是用于注入数据的，它们的作用就和在xml配置文件下写一个property标签的作用是一样的,当引用注解时，我们的spring配置文件应该
使用下面的头文件来使用;
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.qin&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
&nbsp;&nbsp;&nbsp;&nbsp;其中context:componet-san标签时扫描注解包的意思，当配置
这个配置文件的时候，spring会自动去扫描这个包下所有的spring注解，读取这个类，把注解
下的类加入到springioc容器中管理，而容器采用的是静态的Map<String,Object> beans来保存
这些被注解的类。
<h2>注解</h2>
下面我将详细介绍部分注解的作用：

<p> &nbsp;&nbsp;&nbsp;&nbsp;@Component:<br>                         作用：用于把当前类对象存入spring容器中<br>                          属性：<br>                          value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写<br>                          @Controller：一般用在表现层<br>                          @Service：一般用在业务层<br>                          @Repository：一般用在持久层<br>                          以上三个注解他们的作用和属性与Component是一模一样<br>                          他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰</p>
<p> &nbsp;&nbsp;&nbsp;&nbsp;@Autowired:<br>                             作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功<br>                                   如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。<br>                                   如果Ioc容器中有多个类型匹配时：<br>                             出现位置：<br>                                 可以是变量上，也可以是方法上<br>                             细节：<br>                                 在使用注解注入时，set方法就不是必须的了。<br> &nbsp;&nbsp;&nbsp;&nbsp;用于改变作用范围的<br>                              他们的作用就和在bean标签中使用scope属性实现的功能是一样的<br>                              @Scope<br>                                  作用：用于指定bean的作用范围<br>                                  属性：<br>                                      value：指定范围的取值。常用取值：singleton prototype<br>                         和生命周期相关 (了解)<br>                              他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的<br>                              @PreDestroy<br>                                  作用：用于指定销毁方法<br>                              @PostConstruct<br>                                  作用：用于指定初始化方法<br> &nbsp;&nbsp;&nbsp;&nbsp;@Qualifier:<br>                             作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以（稍后我们讲）<br>                             属性：<br>                                 value：用于指定注入bean的id。<br>                         @Resource<br>                             作用：直接按照bean的id注入。它可以独立使用<br>                             属性：<br>                                 name：用于指定bean的id。<br>                         以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。<br>                         另外，集合类型的注入只能通过XML来实现。<br>                         @Value<br>                             作用：用于注入基本类型和String类型的数据<br>                             属性：<br>                                 value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）<br>                                         SpEL的写法：${表达式}</p>
]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring基于注解的事务</title>
    <url>/2020/05/15/spring/spring%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2>spring基于注解的事务</h2>

<h4>spring中基于注解的声明式事务控制配置步骤</h4>

<p>1.配置事务管理器</p>
<p>2.开启spring对注解事务的支持</p>
<p>3.在需要事务支持的地方使用@Transactional注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;总的操作在下面代码中</span><br><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xmlns:aop&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&quot;</span><br><span class="line">       xmlns:tx&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;tx&#x2F;spring-tx.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;aop&#x2F;spring-aop.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">    &lt;context:component-scan base-package&#x3D;&quot;com.itheima&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">    &lt;bean id&#x3D;&quot;transactionManager&quot;  class&#x3D;&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;</span><br><span class="line">        &lt;property name&#x3D;&quot;dataSource&quot; ref&#x3D;&quot;dataSource&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">    &lt;&#x2F;bean&gt;</span><br><span class="line">    &lt;tx:annotation-driven transaction-manager&#x3D;&quot;transactionManager&quot;&gt;&lt;&#x2F;tx:annotation-driven&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring配置文件类注解</title>
    <url>/2020/04/19/spring/spring%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E7%B1%BB%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2>基于注解的配置文件</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;在spring中我们可以使用注解来代替配置文件，而具体的一个配置模板如下所示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@ComponentScan(&quot;com.itheima&quot;)</span><br><span class="line">public class configuration &#123;</span><br><span class="line">    &#x2F;*</span><br><span class="line">    * @Bean相当于spring标签中的bean标签</span><br><span class="line">    * Bean标签不写value值是bean对象的id默认是方法的名字+小写</span><br><span class="line">    * @Scope相当于设置bean对象属于单例或者多例,这里表示多例对象的意思</span><br><span class="line">    * *&#x2F;</span><br><span class="line">    @Bean(&quot;runner&quot;)</span><br><span class="line">    @Scope(&quot;prototype&quot;)</span><br><span class="line">    public QueryRunner createRunner(DataSource ds)</span><br><span class="line">    &#123;</span><br><span class="line">        return new QueryRunner(ds);</span><br><span class="line">    &#125;</span><br><span class="line">    @Bean(&quot;dataSource&quot;)</span><br><span class="line">    public DataSource createDataSource()</span><br><span class="line">    &#123;</span><br><span class="line">        ComboPooledDataSource ds&#x3D;new ComboPooledDataSource();</span><br><span class="line">        try &#123;</span><br><span class="line">            ds.setDriverClass(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">            ds.setJdbcUrl(&quot;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test&quot;);</span><br><span class="line">            ds.setUser(&quot;root&quot;);</span><br><span class="line">            ds.setPassword(&quot;&quot;);</span><br><span class="line">        &#125; catch (PropertyVetoException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2>配置类注解详解</h2>
&nbsp;&nbsp;&nbsp;&nbsp;上面的代码只是简单的介绍了spring配置文件中的用法，这里将详细介绍:

<p>@Configuration<br>作用： 用于指定当前类是一个spring配置类，当创建容器时会从该类上加载注解。获取容器时需要使用AnnotationApplicationContext(有@Configuration注解的类.class)。<br>属性： value:用于指定配置类的字节码</p>
<p>@ComponentScan<br>作用： 用于指定spring在初始化容器时要扫描的包。作用和在spring的xml配置文件中的： &lt;context:component-scan base-package=”com.itheima”/&gt;是一样的。<br>属性： basePackages：用于指定要扫描的包。和该注解中的value属性作用一样。</p>
<p>@Bean<br>作用： 该注解只能写在方法上，表明使用此方法创建一个对象，并且放入spring容器。<br>属性： name：给当前@Bean注解方法创建的对象指定一个名称(即bean的id）。</p>
<p>@PropertySource<br>作用：用于加载.properties文件中的配置。例如我们配置数据源时，可以把连接数据库的信息写到properties配置文件中，就可以使用此注解指定properties配置文件的位置。<br>属性： value[]：用于指定properties文件位置。如果是在类路径下，需要写上classpath:</p>
<p>@Import<br>作用： 用于导入其他配置类，在引入其他配置类时，可以不用再写@Configuration注解。当然，写上也没问题。<br>属性： value[]：用于指定其他配置类的字节码。</p>
<h2>加载注解配置类</h2>

<p>&nbsp;&nbsp;&nbsp;&nbsp;当我们采用注解来开发时，通常需要使用下面的代码来加载注解通过注解获取容器： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ApplicationContext ac &#x3D; new AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">&#x2F;&#x2F;SpringConfiguration.class表示被@Configuration注解的来，这样spring才可以识别得到</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>/springmvc</title>
    <url>/2020/04/19/springmvc/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>Eureka开发环境配置</title>
    <url>/2020/06/11/springcloud/Eureka%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="5-4-3-服务提供者"><a href="#5-4-3-服务提供者" class="headerlink" title="5.4.3.服务提供者"></a>5.4.3.服务提供者</h3><p>服务提供者要向EurekaServer注册服务，并且完成服务续约等工作。</p>
<blockquote>
<p>服务注册</p>
</blockquote>
<p>服务提供者在启动时，会检测配置属性中的：<code>eureka.client.register-with-eureka=true</code>参数是否正确，事实上默认就是true。如果值确实为true，则会向EurekaServer发起一个Rest请求，并携带自己的元数据信息，Eureka Server会把这些信息保存到一个双层Map结构中。</p>
<ul>
<li>第一层Map的Key就是服务id，一般是配置中的<code>spring.application.name</code>属性</li>
<li>第二层Map的key是服务的实例id。一般host+ serviceId + port，例如：<code>locahost:service-provider:8081</code></li>
<li>值则是服务的实例对象，也就是说一个服务，可以同时启动多个不同实例，形成集群。</li>
</ul>
<blockquote>
<p>服务续约</p>
</blockquote>
<p>在注册服务完成以后，服务提供者会维持一个心跳（定时向EurekaServer发起Rest请求），告诉EurekaServer：“我还活着”。这个我们称为服务的续约（renew）；</p>
<p>有两个重要参数可以修改服务续约的行为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">90</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure>

<ul>
<li>lease-renewal-interval-in-seconds：服务续约(renew)的间隔，默认为30秒</li>
<li>lease-expiration-duration-in-seconds：服务失效时间，默认值90秒</li>
</ul>
<p>也就是说，默认情况下每个30秒服务会向注册中心发送一次心跳，证明自己还活着。如果超过90秒没有发送心跳，EurekaServer就会认为该服务宕机，会从服务列表中移除，这两个值在生产环境不要修改，默认即可。</p>
<p>但是在开发时，这个值有点太长了，经常我们关掉一个服务，会发现Eureka依然认为服务在活着。所以我们在开发阶段可以适当调小。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="attr">lease-expiration-duration-in-seconds:</span> <span class="number">10</span> <span class="comment"># 10秒即过期</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">5</span> <span class="comment"># 5秒一次心跳</span></span><br></pre></td></tr></table></figure>



<h3 id="5-4-4-服务消费者"><a href="#5-4-4-服务消费者" class="headerlink" title="5.4.4.服务消费者"></a>5.4.4.服务消费者</h3><blockquote>
<p>获取服务列表</p>
</blockquote>
<p>当服务消费者启动时，会检测<code>eureka.client.fetch-registry=true</code>参数的值，如果为true，则会拉取Eureka Server服务的列表只读备份，然后缓存在本地。并且<code>每隔30秒</code>会重新获取并更新数据。我们可以通过下面的参数来修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>生产环境中，我们不需要修改这个值。</p>
<p>但是为了开发环境下，能够快速得到服务的最新状态，我们可以将其设置小一点。</p>
<h3 id="5-4-5-失效剔除和自我保护"><a href="#5-4-5-失效剔除和自我保护" class="headerlink" title="5.4.5.失效剔除和自我保护"></a>5.4.5.失效剔除和自我保护</h3><blockquote>
<p>服务下线</p>
</blockquote>
<p>当服务进行正常关闭操作时，它会触发一个服务下线的REST请求给Eureka Server，告诉服务注册中心：“我要下线了”。服务中心接受到请求之后，将该服务置为下线状态。</p>
<blockquote>
<p>失效剔除</p>
</blockquote>
<p>有些时候，我们的服务提供方并不一定会正常下线，可能因为内存溢出、网络故障等原因导致服务无法正常工作。Eureka Server需要将这样的服务剔除出服务列表。因此它会开启一个定时任务，每隔60秒对所有失效的服务（超过90秒未响应）进行剔除。</p>
<p>可以通过<code>eureka.server.eviction-interval-timer-in-ms</code>参数对其进行修改，单位是毫秒，生产环境不要修改。</p>
<p>这个会对我们开发带来极大的不变，你对服务重启，隔了60秒Eureka才反应过来。开发阶段可以适当调整，比如：10秒</p>
<blockquote>
<p>自我保护</p>
</blockquote>
<p>我们关停一个服务，就会在Eureka面板看到一条警告,</p>
<p>这是触发了Eureka的自我保护机制。当一个服务未按时进行心跳续约时，Eureka会统计最近15分钟心跳失败的服务实例的比例是否超过了85%。在生产环境下，因为网络延迟等原因，心跳失败实例的比例很有可能超标，但是此时就把服务剔除列表并不妥当，因为服务可能没有宕机。Eureka就会把当前实例的注册信息保护起来，不予剔除。生产环境下这很有效，保证了大多数服务依然可用。</p>
<p>但是这给我们的开发带来了麻烦， 因此开发阶段我们都会关闭自我保护模式：（itcast-eureka）</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">enable-self-preservation:</span> <span class="literal">false</span> <span class="comment"># 关闭自我保护模式（缺省为打开）</span></span><br><span class="line">    <span class="attr">eviction-interval-timer-in-ms:</span> <span class="number">1000</span> <span class="comment"># 扫描失效服务的间隔时间（缺省为60*1000ms）</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>eureka</category>
      </categories>
      <tags>
        <tag>eureka</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc值JSON数据前后端转换</title>
    <url>/2020/05/17/springmvc/springmvc%E4%B9%8BJSON%E6%95%B0%E6%8D%AE%E5%89%8D%E5%90%8E%E7%AB%AF%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p>在开发的时候我们常常需要对json数据的前后端进行转换，当我们使用springmvc的注解来开发时就可以减少了我们的工作量。<br>假设我们使用jquery进行一个ajax请求</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  $(function () &#123;</span><br><span class="line">    $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">          url:&quot;user&#x2F;testAjax&quot;,</span><br><span class="line">          contentType:&quot;application&#x2F;json;charset&#x3D;UTF-8&quot;,</span><br><span class="line">          data:&#39;&#123;&quot;username&quot;:&quot;呵呵&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;money&quot;:1000&#125;&#39;,</span><br><span class="line">          dataType:&#39;json&#39;,</span><br><span class="line">          type:&quot;post&quot;,</span><br><span class="line">          success:function (data) &#123;</span><br><span class="line">                alert(data.username);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>当我们发送数据时，服务器端可以使用@RequestBody来接受jason数据并且自动转换,并使用@ReponseBody来并返回json数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(value &#x3D; &quot;user&quot;)</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    @RequestMapping(&quot;testAjax&quot;)</span><br><span class="line">    public @ResponseBody User testAjax(@RequestBody User user)</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        return  user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当使用@ResponseBody时我们需要在maven的来引入以下的依赖</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-databind&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-core&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.fasterxml.jackson.core&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jackson-annotations&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.0&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc之文件上传</title>
    <url>/2020/05/17/springmvc/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>传统的方式需要修改以下表单的提交格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&#x2F;user&#x2F;fileUpload1&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&quot;multipart&#x2F;form-data&quot;&gt;</span><br><span class="line">        选择文件:&lt;input type&#x3D;&quot;file&quot; name&#x3D;&quot;upload&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;上传文件&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<p>还要导一下响应的依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">  &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.6&lt;&#x2F;version&gt;</span><br><span class="line">  &lt;&#x2F;dependency&gt;</span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>
<p>然后再服务器端需要这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;fileUpload1&quot;)</span><br><span class="line">    public String fileUpload1(HttpServletRequest request) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;文件输出&quot;);</span><br><span class="line">        String path&#x3D;request.getSession().getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File file&#x3D;new File(path);</span><br><span class="line">        if(!file.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        DiskFileItemFactory factory&#x3D;new DiskFileItemFactory();</span><br><span class="line">        ServletFileUpload upload&#x3D;new ServletFileUpload(factory);</span><br><span class="line">        List&lt;FileItem&gt; list&#x3D;upload.parseRequest(request);</span><br><span class="line">        for (FileItem item:list)</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F;判断当前对象是否是一个上传表单项</span><br><span class="line">            if (item.isFormField())</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;说明表单项</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;说明上传的是文件项目</span><br><span class="line">                &#x2F;&#x2F;获取到上传文件的名称</span><br><span class="line">                String FileName&#x3D;item.getName();</span><br><span class="line">                String uuid&#x3D;UUID.randomUUID().toString().replace(&quot;-&quot;,&quot;&quot;);</span><br><span class="line">                &#x2F;&#x2F;写入服务器端</span><br><span class="line">                item.write(new File(path,uuid+&quot;_&quot;+FileName));</span><br><span class="line">                &#x2F;&#x2F;删除临时文件</span><br><span class="line">                item.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(path);</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于解析文件稍微有些麻烦，所以我决定用springmvc的文件解析器来处理文件的上传方式<br>这个是文件解析器的原理</p>
<img src="/2020/05/17/springmvc/springmvc%E4%B9%8B%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/%E6%96%87%E4%BB%B6%E8%A7%A3%E6%9E%90%E5%99%A8%E5%8E%9F%E7%90%86.bmp" class="" title="springmvc之文件上传">
<p>首先我们需要引入一个配置文件,注意：配置文件bean的id是固定的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;multipartResolver&quot; class&#x3D;&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;&gt;</span><br><span class="line">                &lt;!--配置最大上传的文件大小--&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;maxUploadSize&quot; value&#x3D;&quot;10485670&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>
<p>然后再Controller类的下面写处理,使用MultipartFile来加载文件类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;fileUpload1&quot;)</span><br><span class="line">    public String fileUpload1(HttpServletRequest request, MultipartFile upload) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;文件输出&quot;);</span><br><span class="line">        String path &#x3D; request.getSession().getServletContext().getRealPath(&quot;&#x2F;uploads&#x2F;&quot;);</span><br><span class="line">        File file &#x3D; new File(path);</span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            file.mkdir();</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;说明上传的是文件项目</span><br><span class="line">        &#x2F;&#x2F;获取到上传文件的传统名称，即原来的名字</span><br><span class="line">        String FileName &#x3D; upload.getOriginalFilename();</span><br><span class="line">        String uuid &#x3D; UUID.randomUUID().toString().replace(&quot;-&quot;, &quot;&quot;);</span><br><span class="line">        &#x2F;&#x2F;写入服务器端</span><br><span class="line">        upload.transferTo(new File(path, uuid + &quot;_&quot; + FileName));</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc异常处理器</title>
    <url>/2020/05/18/springmvc/springmvc%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%99%A8/</url>
    <content><![CDATA[<p>有的时候我们再前端的页面在访问页面时会报404错误，这样这错误对用户时及其不友好的，这时候我们需要自定义一个异常处理器来让页面跳转到一个友好的界面，提高用户的体验感。<br>首先，为了抛出异常，我们需要自定义一个异常来保存一些信息，当抛出异常的时候我们可以根据异常来提取信息，显示给用户看.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 自定义一个异常类</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SysExecption extends Exception &#123;</span><br><span class="line">    private String message;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getMessage() &#123;</span><br><span class="line">        return message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setMessage(String message) &#123;</span><br><span class="line">        this.message &#x3D; message;</span><br><span class="line">    &#125;</span><br><span class="line">    public SysExecption(String message)</span><br><span class="line">    &#123;</span><br><span class="line">        this.message&#x3D;message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们需要实现一个springmvc为我们提供的异常处理器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">异常处理器对象</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class SysExeceptionResolver implements HandlerExceptionResolver &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) &#123;</span><br><span class="line">        SysExecption sysE&#x3D;null;</span><br><span class="line">        if (e instanceof SysExecption)</span><br><span class="line">            sysE&#x3D; (SysExecption) e;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            sysE&#x3D;new SysExecption(&quot;系统正在维护中&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        &#x2F;&#x2F;创建ModelAndView对象</span><br><span class="line">        ModelAndView mv&#x3D;new ModelAndView();</span><br><span class="line">        mv.addObject(&quot;errorMsg&quot;,sysE.getMessage());</span><br><span class="line">        mv.setViewName(&quot;error&quot;);</span><br><span class="line">        return mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了抛出异常我们需要在控制器中模拟一个异常，方便我们能够正常的抛出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">@RequestMapping(&quot;user&quot;)</span><br><span class="line">public class UserController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;fileUpload1&quot;)</span><br><span class="line">    public String fileUpload1(MultipartFile upload) throws SysExecption&#123;</span><br><span class="line">        &#x2F;&#x2F;模拟异常</span><br><span class="line">        try &#123;</span><br><span class="line">            int a&#x3D;10&#x2F;0;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            &#x2F;&#x2F;打印异常信息</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            &#x2F;&#x2F;抛出自定义异常信息</span><br><span class="line">            throw new SysExecption(&quot;查询所有用户出现错误&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后我们只需要在springmvc.xml配置文件中添加一个bean对象，springmvc会自动的读取整个类并并使用它。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;sysExeceptionResolver&quot; class&#x3D;&quot;cn.itcast.exeception.SysExeceptionResolver&quot;&gt;&lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc拦截器的使用</title>
    <url>/2020/05/18/springmvc/springmvc%E6%8B%A6%E6%88%AA%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>再开发的工程中我们常常需要拦截没有登陆的用户进行访问页面，这时候springmvc为我们提供了拦截器，让我们能够在工作中进行有效的开发。要使用springmvc的拦截器首先需要实现它的一个接口HandlerInterceptor:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MyInterceptor implements HandlerInterceptor &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        &#x2F;*</span><br><span class="line">        拦截器预处理，controller之前执行</span><br><span class="line">        return true:放行，执行下一个拦截器，如果没有执行controller中的方法</span><br><span class="line">        return false:不放行,可以使用request,response提前跳转到其他的页面</span><br><span class="line">         *&#x2F;</span><br><span class="line">        System.out.println(&quot;MyInterceptor的preHandle的方法执行了&quot;);</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;**</span><br><span class="line">     * 后处理方法</span><br><span class="line">     * @param request</span><br><span class="line">     * @param response</span><br><span class="line">     * @param handler</span><br><span class="line">     * @param modelAndView</span><br><span class="line">     * @throws Exception</span><br><span class="line">     *&#x2F;</span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line">        System.out.println(&quot;执行.....之后&quot;);</span><br><span class="line">        &#x2F;&#x2F;执行这个跳转后controller的方法跳转不再执行</span><br><span class="line">        request.getRequestDispatcher(&quot;&#x2F;WEB-INF&#x2F;pages&#x2F;error.jsp&quot;).forward(request,response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception &#123;</span><br><span class="line">       &#x2F;&#x2F;页面转发成功后，才会执行</span><br><span class="line">        System.out.println(&quot;这个是最后执行的&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后需要在主配置文件中配置拦截器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">                &lt;mvc:interceptor&gt;</span><br><span class="line">                        &lt;!--你要拦截的具体的方法--&gt;</span><br><span class="line">                        &lt;mvc:mapping path&#x3D;&quot;&#x2F;user&#x2F;*&quot;&#x2F;&gt;</span><br><span class="line">                        &lt;!--你不要拦截的方法--&gt;</span><br><span class="line">                        &lt;!--两个配一个就好了--&gt;</span><br><span class="line">                        &lt;!--&lt;mvc:exclude-mapping path&#x3D;&quot;&quot;&gt;&lt;&#x2F;mvc:exclude-mapping&gt;--&gt;</span><br><span class="line">                        &lt;!--配置拦截器对象--&gt;</span><br><span class="line">                        &lt;bean class&#x3D;&quot;cn.itcast.interceptor.MyInterceptor&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">                &lt;&#x2F;mvc:interceptor&gt;</span><br><span class="line">        &lt;&#x2F;mvc:interceptors&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc自定义类型转换器</title>
    <url>/2020/05/16/springmvc/springmvc%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2%E5%99%A8/</url>
    <content><![CDATA[<h2>springmvc自定义类型转换器</h2>

<p>在springmvc的编程过程中，有时候我们在绑定一个日期的参数时不太符合我们的要求，这时候我们就需要自定义一个<br>类型转换器来转换时间的格式，并在springmvc的配置文件中引用它。在使用自定义的转换器时，我们需要实现一个接口<br>Converter&lt;S,T&gt;,S代表字符串，T代表要转换成的函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class StringtoDate implements Converter&lt;String, Date&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public Date convert(String s) &#123;</span><br><span class="line">        if (s&#x3D;&#x3D;null)</span><br><span class="line">        &#123;</span><br><span class="line">            throw new RuntimeException(&quot;请您传入数据&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        SimpleDateFormat sdf&#x3D;new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);</span><br><span class="line">        Date date&#x3D;null;</span><br><span class="line">        try &#123;</span><br><span class="line">            date&#x3D;sdf.parse(s);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们需要在配置文件中配置并引用它。值得注意的是，当我们配置了转换器之后，我们需要在<a href="mvc:annotation">mvc:annotation</a>的标签中来引用它，<br>如果不引用的话，springmvc还是会使用默认的类型转换器，导致我们自定义的转换器无法生效：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置自定义的类型转换器--&gt;</span><br><span class="line">       &lt;bean id&#x3D;&quot;conversionServiceFactoryBean&quot; class&#x3D;&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;&gt;</span><br><span class="line">               &lt;property name&#x3D;&quot;converters&quot;&gt;</span><br><span class="line">                       &lt;set&gt;</span><br><span class="line">                               &lt;bean class&#x3D;&quot;cn.itcast.utils.StringtoDate&quot;&gt;&lt;&#x2F;bean&gt;</span><br><span class="line">                       &lt;&#x2F;set&gt;</span><br><span class="line">               &lt;&#x2F;property&gt;</span><br><span class="line">       &lt;&#x2F;bean&gt;</span><br><span class="line">       &lt;mvc:annotation-driven conversion-service&#x3D;&quot;conversionServiceFactoryBean&quot;&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc的基本使用配置</title>
    <url>/2020/05/16/springmvc/springmvc%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2>springmvc的基本使用配置</h2>
在简单的使用springmvc时我们需要进行一个简单的入门配置,首先我们需要在resource配置文件根目录下配置spring的基本配置文件，一般命名为springmvc.xml
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">       xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">       xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">       xsi:schemaLocation&#x3D;&quot;</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">        http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd&quot;&gt;</span><br><span class="line">        &lt;!--spring的配置，开启注解扫描,用来把springmvc的servlet放入容器中--&gt;</span><br><span class="line">        &lt;context:component-scan base-package&#x3D;&quot;cn.itcast&quot;&gt;&lt;&#x2F;context:component-scan&gt;</span><br><span class="line">        &lt;!--springmvc的视图解析器,用于将返回的字符串解析为要跳转的页面--&gt;</span><br><span class="line">        &lt;bean id&#x3D;&quot;viewResolver&quot; class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;pages&#x2F;&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot;&gt;&lt;&#x2F;property&gt;</span><br><span class="line">        &lt;&#x2F;bean&gt;</span><br><span class="line">        &lt;!--开启springmvc的框架注解支持--&gt;</span><br><span class="line">        &lt;!--使用&lt;mvc:annotation-driven&gt;标签会自动加载RequestMappingHandler(处理映射器)和--&gt;</span><br><span class="line">        &lt;!--RequestMappingHandlerAdapter(处理适配器),可用在springmvc.xml配置文件中使用这个标签来代替注解适配器和适配器的配置--&gt;</span><br><span class="line">        &lt;mvc:annotation-driven&gt;&lt;&#x2F;mvc:annotation-driven&gt;</span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>
然后还需要在web.xml配置文件中加载DispatcherServlet和在其内部中使用init-parm引入springmvc配置文件
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line">        &quot;-&#x2F;&#x2F;Sun Microsystems, Inc.&#x2F;&#x2F;DTD Web Application 2.3&#x2F;&#x2F;EN&quot;</span><br><span class="line">        &quot;http:&#x2F;&#x2F;java.sun.com&#x2F;dtd&#x2F;web-app_2_3.dtd&quot; &gt;</span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;&#x2F;display-name&gt;</span><br><span class="line">  &lt;servlet&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;init-param&gt;</span><br><span class="line">      &lt;param-name&gt;contextConfigLocation&lt;&#x2F;param-name&gt;</span><br><span class="line">      &lt;param-value&gt;classpath:springmvc.xml&lt;&#x2F;param-value&gt;</span><br><span class="line">    &lt;&#x2F;init-param&gt;</span><br><span class="line">    &lt;load-on-startup&gt;1&lt;&#x2F;load-on-startup&gt;</span><br><span class="line">  &lt;&#x2F;servlet&gt;</span><br><span class="line">  &lt;servlet-mapping&gt;</span><br><span class="line">    &lt;servlet-name&gt;springmvc&lt;&#x2F;servlet-name&gt;</span><br><span class="line">    &lt;url-pattern&gt;&#x2F;&lt;&#x2F;url-pattern&gt;</span><br><span class="line">  &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">&lt;&#x2F;web-app&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc注解</title>
    <url>/2020/05/17/springmvc/springmvc%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h2>springmvc注解</h2>

<p>@RequestParam<br>    作用:把请求中指定名称的参数给控制器中的形参赋值。<br>    属性:<br>        value:请求参数的名称<br>        required:请求参数是否提供此参数。默认值:true。表示必须提供,如果不提供将报错。</p>
<p>@RequestBody<br>    作用:用于获取请求体内容。直接使用得到的是key=value&amp;key=value…结构的数据<br>         get方式不适用,一般用户json字符串的转换比较多一点,方便<br>    属性:<br>         required:是否必须有请求体。默认值是true，当取值为true时,get请求方式会报错，如果取值为false，<br>         get请求为null。<br>@PathVaribale<br>    作用:用于绑定url中的占位符。例如：请求url中/delete/{id},这个id就是url占位符。<br>         url支持占位符是spring3.0之后加入的。是springmvc支持rest风格URL的一个重要标志。<br>    属性:<br>        value:用于指定url中的占位符的名称<br>        required:是否必须提供占位符<br>@RequestHeader<br>    作用:<br>        用于获取请求消息头。<br>    属性：<br>        value:提供消息头名称<br>        required:是否必须有此消息头<br>    注:<br>        在实际开发中一般不怎么用<br>@CokieValue<br>    作用:<br>        用于把指定cookie名称的值传入控制方法参数。<br>    属性:<br>        value:只用cookie的名称<br>        required:是否必须有此cookie<br>@ModelAttribute<br>    作用:<br>         该注解是SpringMVC4.3版本以后新加入的。它可以用于修饰方法和参数。 出现在方法上，表示当前方法会在控制器的方法执行之前，先执行。<br>         它可以修饰没有返回值的方法，也可以修饰有具体返回值的方法。 出现在参数上，获取指定的数据给参数赋值。<br>    属性：<br>         value：用于获取数据的key。key可以是POJO的属性名称，也可以是map结构的key。 应用场景： 当表单提交数据不是完整的实体类数据时，保证没有提交数据的字段使用数据库对象原来的数据。<br>         例如： 我们在编辑一个用户时，用户有一个创建信息字段，该字段的值是不允许被修改的。在提交表单数据是肯定没有此字段的内容，一旦更新会把该字段内容置为null，此时就可以使用此注解解决问题。<br>@SessionAttribute<br>    作用：<br>        用于多次执行控制器方法间的参数共享。<br>    属性：<br>        value：用于指定存入的属性名称 type：用于指定存入的数据类型。</p>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc解决中文乱码问题</title>
    <url>/2020/05/16/springmvc/springmvc%E8%A7%A3%E5%86%B3%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2>springmvc解决中文乱码问题</h2>

<p>有时候我们在使用springmvc的时候会出现中文乱码的问题，这个时候我们就需要在web.xml中配置一个</p>
<p>springmvc的过滤器来解决中文乱码的问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--配置过滤器--&gt;</span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;&#x2F;filter-class&gt;</span><br><span class="line">  &lt;init-param&gt;</span><br><span class="line">    &lt;param-name&gt;encoding&lt;&#x2F;param-name&gt;</span><br><span class="line">    &lt;param-value&gt;UTF-8&lt;&#x2F;param-value&gt;</span><br><span class="line">  &lt;&#x2F;init-param&gt;</span><br><span class="line">&lt;&#x2F;filter&gt;</span><br><span class="line">&lt;filter-mapping&gt;</span><br><span class="line">  &lt;filter-name&gt;encodingFilter&lt;&#x2F;filter-name&gt;</span><br><span class="line">  &lt;url-pattern&gt;&#x2F;*&lt;&#x2F;url-pattern&gt;</span><br><span class="line">&lt;&#x2F;filter-mapping&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc配置不拦截静态资源</title>
    <url>/2020/05/17/springmvc/springmvc%E9%85%8D%E7%BD%AE%E4%B8%8D%E6%8B%A6%E6%88%AA%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而<br>不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置<br>1.mvc:resources标签配置不过滤<br>2.location元素表示webapp目录下的包下的所有文件<br>3.mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 设置静态资源不过滤 --&gt;</span><br><span class="line">&lt;mvc:resources location&#x3D;&quot;&#x2F;css&#x2F;&quot; mapping&#x3D;&quot;&#x2F;css&#x2F;**&quot;&#x2F;&gt; &lt;!-- 样式 --&gt;</span><br><span class="line">&lt;mvc:resources location&#x3D;&quot;&#x2F;images&#x2F;&quot; mapping&#x3D;&quot;&#x2F;images&#x2F;**&quot;&#x2F;&gt; &lt;!-- 图片 --&gt;</span><br><span class="line">&lt;mvc:resources location&#x3D;&quot;&#x2F;js&#x2F;&quot; mapping&#x3D;&quot;&#x2F;js&#x2F;**&quot;&#x2F;&gt; &lt;!-- javascript --&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令大全</title>
    <url>/2020/05/28/%E5%9F%BA%E6%9C%AC%E5%B8%B8%E8%AF%86/git%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</url>
    <content><![CDATA[<h2 id="Git的基本使用"><a href="#Git的基本使用" class="headerlink" title="Git的基本使用"></a>Git的基本使用</h2><h3 id="创建一个仓库"><a href="#创建一个仓库" class="headerlink" title="创建一个仓库"></a>创建一个仓库</h3><ul>
<li>git init<br>使用这个初始化命令后，会生成一个.git的隐藏文件<h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><h4 id="姓名-git-config-–global-user-name-“theqin”"><a href="#姓名-git-config-–global-user-name-“theqin”" class="headerlink" title="姓名:git config –global user.name “theqin”"></a>姓名:git config –global user.name “theqin”</h4><h4 id="邮箱-git-config-–global-user-email-“1029589750-qq-com“"><a href="#邮箱-git-config-–global-user-email-“1029589750-qq-com“" class="headerlink" title="邮箱:git config –global user.email “1029589750@qq.com“"></a>邮箱:git config –global user.email “<a href="mailto:1029589750@qq.com">1029589750@qq.com</a>“</h4><h4 id="差异颜色使用-git-config-–global-color-ui-true"><a href="#差异颜色使用-git-config-–global-color-ui-true" class="headerlink" title="差异颜色使用:git config –global color.ui true"></a>差异颜色使用:git config –global color.ui true</h4><h4 id="设置别名-git-config-–global-alias-it-init"><a href="#设置别名-git-config-–global-alias-it-init" class="headerlink" title="设置别名:git config –global alias.it init"></a>设置别名:git config –global alias.it init</h4><h2 id="Git基本流程"><a href="#Git基本流程" class="headerlink" title="Git基本流程"></a>Git基本流程</h2><h4 id="对已修改文件作快照-并保存到暂存区域"><a href="#对已修改文件作快照-并保存到暂存区域" class="headerlink" title="对已修改文件作快照,并保存到暂存区域"></a>对已修改文件作快照,并保存到暂存区域</h4></li>
<li>git add file.c <h4 id="将保存在暂存区的文件快照提交到版本库"><a href="#将保存在暂存区的文件快照提交到版本库" class="headerlink" title="将保存在暂存区的文件快照提交到版本库"></a>将保存在暂存区的文件快照提交到版本库</h4></li>
<li>单步提交：git commit -m “commit info” </li>
<li>一次性提交：git commit -a </li>
<li>修改最后一次提交：git commit -amend<br>注意：<br>  如果提交修改没有保存到暂存区的话，是不会提交到版本库的。<h2 id="Git文件删除"><a href="#Git文件删除" class="headerlink" title="Git文件删除"></a>Git文件删除</h2><h4 id="从工作目录中删除"><a href="#从工作目录中删除" class="headerlink" title="从工作目录中删除"></a>从工作目录中删除</h4></li>
<li>rm -rf file.c Linux自带的命令<h4 id="从工作目录和暂存区中删除"><a href="#从工作目录和暂存区中删除" class="headerlink" title="从工作目录和暂存区中删除"></a>从工作目录和暂存区中删除</h4></li>
<li>git rm -f file.c<h4 id="从暂存区中删除-工作目录中保留"><a href="#从暂存区中删除-工作目录中保留" class="headerlink" title="从暂存区中删除,工作目录中保留"></a>从暂存区中删除,工作目录中保留</h4></li>
<li>git rm –cached file.c<h4 id="从版本库中删除：版本回退到错误提交前的版本"><a href="#从版本库中删除：版本回退到错误提交前的版本" class="headerlink" title="从版本库中删除：版本回退到错误提交前的版本"></a>从版本库中删除：版本回退到错误提交前的版本</h4></li>
<li>撤销提交到暂存区:git reset -soft HEAD^(表示回退一个版本)</li>
<li>撤销提交到工作区:git reset -mixed HEAD^(表示回退一个版本)</li>
<li>将工作区、暂存区和版本库恢复到指定版本：git reset –hard HEAD^(表示回退一个版本)<br>提示：删除一个也算修改，也可以从版本库中还原<h4 id="撤销版本库的提交"><a href="#撤销版本库的提交" class="headerlink" title="撤销版本库的提交"></a>撤销版本库的提交</h4></li>
<li>git reset –hard HEAD^</li>
<li>回退版本，并刷新到工作区中</li>
<li>先前的提交对象还在版本库中孤独的存在着</li>
</ul>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><h4 id="撤销工作区的修改"><a href="#撤销工作区的修改" class="headerlink" title="撤销工作区的修改"></a>撤销工作区的修改</h4><ul>
<li>git checkout file.c </li>
<li>让文件回到最近一次commit或add的状态</li>
<li>若文件还没添加到暂存区且做了修改:回到暂存区状态<h4 id="撤销暂存区的内容"><a href="#撤销暂存区的内容" class="headerlink" title="撤销暂存区的内容"></a>撤销暂存区的内容</h4></li>
<li>git reset HEAD file.c</li>
<li>将暂存区的修改撤销掉，重新放回工作区<h4 id="查看当前的状态"><a href="#查看当前的状态" class="headerlink" title="查看当前的状态"></a>查看当前的状态</h4></li>
<li>git status<h4 id="查看提交历史"><a href="#查看提交历史" class="headerlink" title="查看提交历史"></a>查看提交历史</h4></li>
<li>git log  (–oneline可以只显示一行，不用显示太长的哈希字符串)<h4 id="使用git-log查询出来的哈希值在下面命令中查询可以得知具体修改的内容"><a href="#使用git-log查询出来的哈希值在下面命令中查询可以得知具体修改的内容" class="headerlink" title="使用git log查询出来的哈希值在下面命令中查询可以得知具体修改的内容"></a>使用git log查询出来的哈希值在下面命令中查询可以得知具体修改的内容</h4></li>
<li>git show (哈希值)<h4 id="查看提交差异"><a href="#查看提交差异" class="headerlink" title="查看提交差异"></a>查看提交差异</h4></li>
<li>git diff<h4 id="克隆一个远程仓库的项目"><a href="#克隆一个远程仓库的项目" class="headerlink" title="克隆一个远程仓库的项目"></a>克隆一个远程仓库的项目</h4></li>
<li>git clone repo_url(远程仓库的url地址)<h2 id="查看提交历史-详细"><a href="#查看提交历史-详细" class="headerlink" title="查看提交历史(详细)"></a>查看提交历史(详细)</h2><h4 id="参数选项"><a href="#参数选项" class="headerlink" title="参数选项"></a>参数选项</h4></li>
<li>显示每个版本的修改差异:<br>git log -p -2 | git shortlog</li>
<li>单行显示3条记录:<br>git log -3 –pretty=oneline |git log –oneline</li>
<li>图形化显示:<br>git log –graph |gitk<h4 id="缉凶利器-git-blame"><a href="#缉凶利器-git-blame" class="headerlink" title="缉凶利器:git blame"></a>缉凶利器:git blame</h4></li>
<li>查看一个文件每一行的提交记录</li>
<li>查看第6到11行代码是谁的提交：<br>git blame file.c -L 6,+5</li>
<li>查看某个指定文件的提交修改历史<br>git log -c file.c<h2 id="提交查找"><a href="#提交查找" class="headerlink" title="提交查找"></a>提交查找</h2><h4 id="关键字查找"><a href="#关键字查找" class="headerlink" title="关键字查找"></a>关键字查找</h4>不同的参数灵活使用</li>
<li>查找所有包含hello字符串的文件:git grep hello</li>
<li>查找显示关键字所在文件的行号:git grep -n hello</li>
<li>不显示内容,只显示文件名:git grep –name-only hello </li>
<li>查看每个文件有多少个匹配:git grep -c hello<br>在特定版本里查找</li>
<li>在v1.0版本里查找:Git grep string v1.0<h4 id="组合查找"><a href="#组合查找" class="headerlink" title="组合查找"></a>组合查找</h4>与查找、或查找</li>
<li>查找hello world:git grep -e hello –and -e world</li>
<li>查找hello 或 world: git grep -e hello –or -e world    <h2 id="修改提交"><a href="#修改提交" class="headerlink" title="修改提交"></a>修改提交</h2><h4 id="增补提交"><a href="#增补提交" class="headerlink" title="增补提交"></a>增补提交</h4></li>
<li>修改最后一次提交:修改提交<br>git commit –amend(需要先把修改的文件添加到缓存区才行)<h4 id="反转提交"><a href="#反转提交" class="headerlink" title="反转提交"></a>反转提交</h4></li>
<li>将原来的提交取消掉<br>git revert SHA1<ul>
<li>反转多个提交:要先反转最后提交，防止冲突。此时原操作的逆操作都在暂存区，然后重新手动提交<br>git revert -n HEAD<br>git revert -n SHA1<br>git commit -m “revert HEAD and SHA1”<h2 id="Git置位"><a href="#Git置位" class="headerlink" title="Git置位"></a>Git置位</h2><h4 id="复位"><a href="#复位" class="headerlink" title="复位"></a>复位</h4></li>
</ul>
</li>
<li>版本回退到工作区<br>git reset SHA1<h4 id="软复位"><a href="#软复位" class="headerlink" title="软复位"></a>软复位</h4></li>
<li>回退版本到暂存区<br>git reset –soft SHA1<h4 id="硬复位"><a href="#硬复位" class="headerlink" title="硬复位"></a>硬复位</h4></li>
<li>会从版本库和工作目录中同时删除提交<br>git reset –hard SHA1<h2 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h2><h4 id="查看当前分支"><a href="#查看当前分支" class="headerlink" title="查看当前分支"></a>查看当前分支</h4></li>
<li>git branch<h4 id="创建一个新的分支"><a href="#创建一个新的分支" class="headerlink" title="创建一个新的分支"></a>创建一个新的分支</h4></li>
<li>git branch 分支名字<h4 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h4></li>
<li>git checkout 分支名字<h3 id="Git标签操作-表示当前开发进度到一个里程碑了"><a href="#Git标签操作-表示当前开发进度到一个里程碑了" class="headerlink" title="Git标签操作:表示当前开发进度到一个里程碑了"></a>Git标签操作:表示当前开发进度到一个里程碑了</h3><h4 id="查看当前标签"><a href="#查看当前标签" class="headerlink" title="查看当前标签"></a>查看当前标签</h4></li>
<li>git tag<h4 id="在当前进度添加一个标签"><a href="#在当前进度添加一个标签" class="headerlink" title="在当前进度添加一个标签"></a>在当前进度添加一个标签</h4></li>
<li>git tag v1.0.0<h4 id="删除一个标签"><a href="#删除一个标签" class="headerlink" title="删除一个标签"></a>删除一个标签</h4></li>
<li>git tag -d v1.0.0</li>
</ul>
<p>####查看git commit对象信息操作</p>
<ul>
<li>git cat-file -p(查看所有信息) -t(查看对象类型) 对象哈希值</li>
</ul>
<h2 id="Git忽略指定文件配置"><a href="#Git忽略指定文件配置" class="headerlink" title="Git忽略指定文件配置"></a>Git忽略指定文件配置</h2><h4 id="在git中有些文件是不需要提交到版本库中的"><a href="#在git中有些文件是不需要提交到版本库中的" class="headerlink" title="在git中有些文件是不需要提交到版本库中的"></a>在git中有些文件是不需要提交到版本库中的</h4><ul>
<li>可执行文件、日志文件、临时文件、库文件<h4 id="忽略文件模式：glob模式匹配"><a href="#忽略文件模式：glob模式匹配" class="headerlink" title="忽略文件模式：glob模式匹配"></a>忽略文件模式：glob模式匹配</h4></li>
<li>忽略以#开始的行</li>
<li>忽略某种格式结尾文件*.[bin]</li>
<li>某个库文件除外，不忽略:!clib.a</li>
<li>忽略临时文件:*~</li>
<li>忽略根目录下的某个文件:/text</li>
<li>忽略某个目录下的所有文件：libs/、libs/*.a</li>
<li>手动创建.gitignore文件<h2 id="差异比较"><a href="#差异比较" class="headerlink" title="差异比较"></a>差异比较</h2><h4 id="比较工作区和暂存区的差异"><a href="#比较工作区和暂存区的差异" class="headerlink" title="比较工作区和暂存区的差异"></a>比较工作区和暂存区的差异</h4></li>
<li>git diff</li>
<li>查看尚未存储文件有哪些新的修改<h4 id="比较暂存区和版本库差异"><a href="#比较暂存区和版本库差异" class="headerlink" title="比较暂存区和版本库差异"></a>比较暂存区和版本库差异</h4></li>
<li>git diff –cached [HEAD]</li>
<li>git diff –staged SHA</li>
<li>查看已暂存文件和上次提交的快照之间的差异<h4 id="比较工作区和版本库差异"><a href="#比较工作区和版本库差异" class="headerlink" title="比较工作区和版本库差异"></a>比较工作区和版本库差异</h4></li>
<li>git diff HEAD</li>
<li>查看为暂存文件和最新提交文件快照的区别<h4 id="比较两个版本之间的差异"><a href="#比较两个版本之间的差异" class="headerlink" title="比较两个版本之间的差异"></a>比较两个版本之间的差异</h4></li>
<li>git diff SHA1 SHA2(SHA代表一个版本号,可以用哈希值来代替)</li>
<li>查看不同版本之间的差异<h2 id="Git压缩仓库"><a href="#Git压缩仓库" class="headerlink" title="Git压缩仓库"></a>Git压缩仓库</h2></li>
<li>在日常运行中，git快照会占用磁盘空间</li>
<li>Git会在增量存储单元中存储修改</li>
<li>用du -sh 可以查看当前仓库的大小</li>
<li>通过git gc命令压缩增量存储单元，节省磁盘空间<h4 id="快照的存储"><a href="#快照的存储" class="headerlink" title="快照的存储"></a>快照的存储</h4></li>
<li>对于修改的内容:做快照处理并保存</li>
<li>对于未修改的文件:做引用处理<h2 id="给提交重新排序"><a href="#给提交重新排序" class="headerlink" title="给提交重新排序"></a>给提交重新排序</h2></li>
<li>git rebase -i HEAD~3</li>
<li>表示要修改前三个提交的顺序<h2 id="Git分支的管理"><a href="#Git分支的管理" class="headerlink" title="Git分支的管理"></a>Git分支的管理</h2><h3 id="分支的基本使用"><a href="#分支的基本使用" class="headerlink" title="分支的基本使用"></a>分支的基本使用</h3><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4></li>
<li>git branch new_branch</li>
<li>git checkout -b new_branch 新建一个分支并且同时切换到这个分支</li>
<li>git checkout -b new_branch old_branch 在某个分支上创建新分支<h4 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h4></li>
<li>git branch<h4 id="切换分支-1"><a href="#切换分支-1" class="headerlink" title="切换分支"></a>切换分支</h4></li>
<li>git checkout branch<h4 id="分支检出很危险，注意！"><a href="#分支检出很危险，注意！" class="headerlink" title="分支检出很危险，注意！"></a>分支检出很危险，注意！</h4></li>
<li>分支检出其实看作是提交的逆操作</li>
<li>检出之前一定要保证工作区和缓存区的清洁<h4 id="分支重命名"><a href="#分支重命名" class="headerlink" title="分支重命名"></a>分支重命名</h4>对于未冲突的分支名</li>
<li>git branch -m oldbranch newbranch<br>对于已经存在的分支</li>
<li>git branch -M oldbranch newbranch<h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4>对于已经合并的分支，直接删除</li>
<li>git branch -d branch_name<br>对于未合并的分支，强制删除</li>
<li>git branch -D branch_name<h4 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h4>合并一个分支到当前的分支</li>
<li>git merge 分支名字<h4 id="压合合并"><a href="#压合合并" class="headerlink" title="压合合并"></a>压合合并</h4>将一个分支上的所有历史合并为一个提交,然后合并到另一个分支上。<br>一般bug或新功能分支都可以使用这种方式合并<br>git merge -squash test_name<h4 id="挑选合并"><a href="#挑选合并" class="headerlink" title="挑选合并"></a>挑选合并</h4>挑选一个提交，添加到当前分支末梢</li>
<li>git cherry-pick SHA<br>挑选多个提交,添加到当前分支末梢</li>
<li>git cherry-pick -n SHA</li>
<li>git commit </li>
<li>这里您会看到合并并更新到版本库，而是在暂存区保存，可以继续<br>cherry-pick,以后一次性提交即可<h4 id="分支衍合"><a href="#分支衍合" class="headerlink" title="分支衍合"></a>分支衍合</h4>git rebase master<h3 id="分支的修改储藏"><a href="#分支的修改储藏" class="headerlink" title="分支的修改储藏"></a>分支的修改储藏</h3><h4 id="保存当前分支数据"><a href="#保存当前分支数据" class="headerlink" title="保存当前分支数据"></a>保存当前分支数据</h4></li>
<li>在当前分支工作被打断，进度不适合提交</li>
<li>保存当前分支工作目录和暂存区的数据</li>
<li>切换到别的分支做其他工作</li>
<li>git stash<h4 id="恢复当前分支数据"><a href="#恢复当前分支数据" class="headerlink" title="恢复当前分支数据"></a>恢复当前分支数据</h4></li>
<li>别的分支完成后，再切换到被打断的分支</li>
<li>恢复工作区和暂存区的数据</li>
<li>git stash apply (pop)</li>
<li>继续工作<h4 id="储藏队列"><a href="#储藏队列" class="headerlink" title="储藏队列"></a>储藏队列</h4></li>
<li>多次使用stash命令</li>
<li>查看储藏栈：git stash list</li>
<li>清空储藏栈：git stash clear</li>
<li>恢复某次储藏：git stash apply stash@{2}<h3 id="恢复已删除分支的提交"><a href="#恢复已删除分支的提交" class="headerlink" title="恢复已删除分支的提交"></a>恢复已删除分支的提交</h3></li>
<li>分支这个指针已经删除，但commit对象还存在</li>
<li>知识脱离了commit链表而已，变成了悬空对象<h4 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h4></li>
<li>找回提交:git fsck –lost-found(相当于在回收站找东西)</li>
<li>查看修改:git show SHA</li>
<li>衍合提交:git rebase SHA</li>
<li>合并提交:git merge SHA<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4></li>
<li>提交可以找回来，但是分支找不回来</li>
<li>commit删除并不是真正的删除<h2 id="远程仓库管理"><a href="#远程仓库管理" class="headerlink" title="远程仓库管理"></a>远程仓库管理</h2><h3 id="SSH公钥配置步骤："><a href="#SSH公钥配置步骤：" class="headerlink" title="SSH公钥配置步骤："></a>SSH公钥配置步骤：</h3>1.本地安装好git；<br>2.桌面右键 Git Bash Here 打开git命令行；<br>3.ssh-keygen -t rsa -C “<a href="mailto:xxxxxx@xxx.com">xxxxxx@xxx.com</a>” (这个写自己注册时的邮箱)（全部按enter）；<br>4.cd ~/.ssh （如果没有执行第三步，则不会有这个文件夹）；<br>5.cat id_rsa.pub 在命令行打开这个文件，会直接输出密钥；<br>6.复制，打开github ，点自己头像 &gt;&gt; settings &gt;&gt; SSH and GPG keys &gt;&gt;New SSH key<h3 id="远程仓库的基本操作"><a href="#远程仓库的基本操作" class="headerlink" title="远程仓库的基本操作"></a>远程仓库的基本操作</h3><h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3></li>
<li>git clone repo_addr<h3 id="如果是一个空的仓库，可以将本地仓库添加到远程仓库"><a href="#如果是一个空的仓库，可以将本地仓库添加到远程仓库" class="headerlink" title="如果是一个空的仓库，可以将本地仓库添加到远程仓库"></a>如果是一个空的仓库，可以将本地仓库添加到远程仓库</h3></li>
<li>git remote add origin <a href="mailto:git@github.com">git@github.com</a>:coderlive/test.git</li>
<li>建议为本地仓库起一个别名</li>
<li>git config –global alias.theqin <a href="mailto:git@github.com">git@github.com</a>:coderlive/test.git</li>
<li>git push -u origin master<h3 id="从远程仓库拉取数据"><a href="#从远程仓库拉取数据" class="headerlink" title="从远程仓库拉取数据"></a>从远程仓库拉取数据</h3></li>
<li>自动本地master分支并跟踪远程仓库master分支<br>git clone origin</li>
<li>仅仅是拉取,不合并到本地<br>git fetch</li>
<li>自动拉取某个分支更新<br>git pull origin dev<h3 id="推送数据到远程仓库"><a href="#推送数据到远程仓库" class="headerlink" title="推送数据到远程仓库"></a>推送数据到远程仓库</h3></li>
<li>默认是origin和master分支:<br>git push origin master<h3 id="查看远程仓库信息"><a href="#查看远程仓库信息" class="headerlink" title="查看远程仓库信息"></a>查看远程仓库信息</h3></li>
<li>git remote -v</li>
<li>git remote show origin<h3 id="指定分支提交"><a href="#指定分支提交" class="headerlink" title="指定分支提交"></a>指定分支提交</h3></li>
<li>git push origin 本地分支:远程分支</li>
<li>用这个可以把一个分支提交到另外一个分支<h3 id="远程仓库的删除"><a href="#远程仓库的删除" class="headerlink" title="远程仓库的删除"></a>远程仓库的删除</h3></li>
<li>git remote rm origin(远程仓库的别名)<h3 id="远程仓库重命名"><a href="#远程仓库重命名" class="headerlink" title="远程仓库重命名"></a>远程仓库重命名</h3></li>
<li>git remote rename old new <h3 id="解除远程仓库"><a href="#解除远程仓库" class="headerlink" title="解除远程仓库"></a>解除远程仓库</h3></li>
<li>git remote remove origin<br>###注意：<br>  这里的origin指的只是远程仓库的别名,origin == github仓库地址<h2 id="远程分支"><a href="#远程分支" class="headerlink" title="远程分支"></a>远程分支</h2></li>
<li>是对远程仓库状态的索引,用origin/master表示<h3 id="远程分支的创建"><a href="#远程分支的创建" class="headerlink" title="远程分支的创建"></a>远程分支的创建</h3></li>
<li>将本地新建分支直接推送到远程仓库</li>
<li>git push origin mybranch(本地分支名字):mybranch2(远程分支名字,可以不写)</li>
<li>远程仓库没有这个分支，将创建这个分支origin/mybranch2</li>
<li>并将本地分支和远程分支建立关联，以后可以直接push<h3 id="跟踪远程分支"><a href="#跟踪远程分支" class="headerlink" title="跟踪远程分支"></a>跟踪远程分支</h3></li>
<li>基于远程分支建立一个本地关联分支</li>
<li>git checkout -b local_branch origin/mybranch2</li>
<li>git push local_branch 建立关联后，就可以直接进行push和pull   <h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3></li>
<li>命令:git push origin:mybranch2(远程分支) <h2 id="标签操作"><a href="#标签操作" class="headerlink" title="标签操作"></a>标签操作</h2><h3 id="打标签"><a href="#打标签" class="headerlink" title="打标签"></a>打标签</h3></li>
<li>在当前分支的末端创建轻量级标签：git tag V1.0(只创建一个引用)</li>
<li>给指定某个commit打标签: git tag v1 SHA</li>
<li>创建重量级标签:git tag -a v1.0 -m “version1.0” SHA(创建了对象存在版本库中)<h3 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h3></li>
<li>查看所有标签:git show 1.0<h3 id="使用标签检出其标记的版本库状态"><a href="#使用标签检出其标记的版本库状态" class="headerlink" title="使用标签检出其标记的版本库状态"></a>使用标签检出其标记的版本库状态</h3></li>
<li>检出:git checkout v1.0</li>
<li>标签指向一个commit,跟branch类似，也是一个引用<h3 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h3></li>
<li>删除：git tag -d v1.0<h2 id="远程仓库标签操作"><a href="#远程仓库标签操作" class="headerlink" title="远程仓库标签操作"></a>远程仓库标签操作</h2><h3 id="推送本地标签到远程-发布版本"><a href="#推送本地标签到远程-发布版本" class="headerlink" title="推送本地标签到远程(发布版本)"></a>推送本地标签到远程(发布版本)</h3></li>
<li>推送某个标签:git push origin v1.0</li>
<li>推送所有标签:git push origin –tags<h3 id="删除远程标签"><a href="#删除远程标签" class="headerlink" title="删除远程标签"></a>删除远程标签</h3></li>
<li>先删除本地标签:git tag -d v1.0</li>
<li>再删除远程标签:git push origin :refs/tags/v1.0</li>
</ul>
]]></content>
      <categories>
        <category>基本常识</category>
      </categories>
      <tags>
        <tag>基本常识</tag>
      </tags>
  </entry>
  <entry>
    <title>支付宝沙箱模拟实现支付功能</title>
    <url>/2020/10/12/%E5%9F%BA%E6%9C%AC%E5%B8%B8%E8%AF%86/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%B2%99%E7%AE%B1%E6%A8%A1%E6%8B%9F%E5%AE%9E%E7%8E%B0%E6%94%AF%E4%BB%98%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h2 id="支付宝沙箱模拟实现支付功能"><a href="#支付宝沙箱模拟实现支付功能" class="headerlink" title="支付宝沙箱模拟实现支付功能"></a>支付宝沙箱模拟实现支付功能</h2><p>​    下面我将向大家介绍一下如何模拟实现支付宝的支付功能：</p>
<blockquote>
<p>1.首先，我们需要去到支付宝的开放平台 <a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">支付宝开放平台</a>,需要用支付宝扫码进行登录</p>
<p>2.然后我们需要按流程找到 控制台-&gt; 沙箱应用-&gt;沙箱应用</p>
</blockquote>
<p><img src="1.png" alt="1"></p>
<blockquote>
<p>3.接下来我们需要点击RSA2(SHA256)密钥来设置公钥和私钥，相当于上传公钥和私钥到官方。</p>
<p>公钥和密钥的生成需要用支付宝开放平台开发助手来生成。我这里提供下载的链接好方便下载:<a href="https://ideservice.alipay.com/ide/getPluginUrl.htm?clientType=assistant&platform=win&channelType=WEB" target="_blank" rel="noopener">支付宝开放平台开发助手</a>。</p>
<p>4.打开开放平台助手,然后点击生成密钥!</p>
</blockquote>
<p><img src="2.png" alt="2"></p>
<blockquote>
<p>把公钥和密钥上传到这里</p>
</blockquote>
<p><img src="3.png" alt="3"></p>
<blockquote>
<p>然后点击查看接入文档</p>
</blockquote>
<p><img src="4.png" alt="4"></p>
<p>接下来我们就需要完全来跟着api文档来弄了:<a href="https://opendocs.alipay.com/apis/api_1/alipay.trade.wap.pay#%E5%85%AC%E5%85%B1%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0" target="_blank" rel="noopener">支付宝支付接口文档</a></p>
<p>5.下面的代码部分:</p>
<p>要使用支付宝的支付功能我们需要引入支付宝的jar包</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;com.alipay.sdk&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;alipay-sdk-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.10.140.ALL&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>6.我这里提供支付宝的api的配置类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AlipayConfig</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 应用ID,支付宝提供的APPID，上面截图中有提到</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String app_id = <span class="string">"2016102500757986"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 商户私钥，您的PKCS8格式RSA2私钥</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String merchant_private_key = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 支付宝公钥,查看地址：https://openhome.alipay.com/platform/appDaily.htm 对应APPID下的支付宝公钥。</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String alipay_public_key = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 服务器异步通知页面路径  需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问.如果只是测试使用,那么设置成自己项目启动后可以访问到的一个路径,作为支付宝发送通知的路径(有什么用暂时没发现)</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String notify_url = <span class="string">"http://localhost:8080/pay/alipay-callback-notify-url"</span>;</span><br><span class="line">         <span class="comment">//请求成功后会返回的路径</span></span><br><span class="line">        <span class="comment">// 页面跳转同步通知页面路径 需http://格式的完整路径，不能加?id=123这类自定义参数，必须外网可以正常访问.如果只是测试使用,那么设置成自己项目启动后可以访问到的一个路径.是支付正常完成后,会访问的路径.</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String return_url = <span class="string">"http://localhost:8080/jingdong/ShoppingCartServlet?action=buyShop"</span>;<span class="comment">//跳转完后就直接去京东首页</span></span><br><span class="line">        <span class="comment">// 签名方式，注意这里，如果步骤设置的是RSA则用RSA,如果按照扇面步骤做的话,选择RSA2</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String sign_type = <span class="string">"RSA2"</span>;</span><br><span class="line">        <span class="comment">// 字符编码格式</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String charset = <span class="string">"utf-8"</span>;</span><br><span class="line">        <span class="comment">// 支付宝网关</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> String gatewayUrl = <span class="string">"https://openapi.alipaydev.com/gateway.do"</span>;</span><br><span class="line">        <span class="comment">//格式</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String format=<span class="string">"json"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MACHINE_ID = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成订单号,用于生成订单号</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getNumber</span><span class="params">(<span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">                StringBuilder buf = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                Random random = <span class="keyword">new</span> Random();</span><br><span class="line">                <span class="comment">/*开头不为0,建议数据量较少时只放开部分，比如1至3开头的数，等业务达到一定数量时，再逐步放开剩余的号码段，由于是固定位数，总数量一定，生成的数越多，重复的几率越大**/</span></span><br><span class="line">                <span class="keyword">int</span> firstNumber = random.nextInt(<span class="number">9</span>) + <span class="number">1</span>;</span><br><span class="line">                buf.append(firstNumber);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">                        buf.append(random.nextInt(<span class="number">10</span>));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> Long.valueOf(buf.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                System.out.println(getNumber(<span class="number">6</span>));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.接下来我们就可以调用接口了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toPay</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        String subject= request.getParameter(<span class="string">"subject"</span>);<span class="comment">//订单的标题,必选</span></span><br><span class="line">        String total_amount=request.getParameter(<span class="string">"total_amount"</span>);<span class="comment">//订单的总金额</span></span><br><span class="line">        String no_id=request.getParameter(<span class="string">"out_trade_no"</span>);<span class="comment">//获取订单编号,可以自己自动生成</span></span><br><span class="line">        AlipayClient alipayClient = <span class="keyword">new</span> DefaultAlipayClient(AlipayConfig.gatewayUrl, AlipayConfig.app_id, AlipayConfig.merchant_private_key, <span class="string">"json"</span>, AlipayConfig.charset, AlipayConfig.alipay_public_key, AlipayConfig.sign_type);</span><br><span class="line">        <span class="comment">//设置请求参数,并把配置类中的两个路径设置进去</span></span><br><span class="line">        AlipayTradePagePayRequest alipayRequest = <span class="keyword">new</span> AlipayTradePagePayRequest();</span><br><span class="line">        alipayRequest.setReturnUrl(AlipayConfig.return_url);</span><br><span class="line">        alipayRequest.setNotifyUrl(AlipayConfig.notify_url);</span><br><span class="line">        <span class="comment">//根据pid获取购物车中的</span></span><br><span class="line">        <span class="comment">//如果想正常调用接口则需要传一些必要参数,out_trade_no:订单号,保证唯一性,支付宝根据该参数生成你的支付单号,total_amount:需要支付的金额,注意是String型,且金额计数的分割","不能存在(例如1,000就是错误的参数),subject:对物品进行描述,product_code:是支付类型.更多详细的参数信息参考链接: [https://docs.open.alipay.com/api_1/alipay.trade.page.pay](https://docs.open.alipay.com/api_1/alipay.trade.page.pay)</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            alipayRequest.setBizContent(<span class="string">"&#123;\"out_trade_no\":\""</span> + no_id + <span class="string">"\","</span></span><br><span class="line">                    + <span class="string">"\"total_amount\":\""</span> + Double.parseDouble(total_amount) + <span class="string">"\","</span></span><br><span class="line">                    + <span class="string">"\"timeout_express\":\"90m\","</span><span class="comment">//这个是设置超时时间</span></span><br><span class="line">                    + <span class="string">"\"subject\":\""</span> + subject + <span class="string">"\","</span></span><br><span class="line">                    + <span class="string">"\"product_code\":\"FAST_INSTANT_TRADE_PAY\"&#125;"</span>);</span><br><span class="line">            <span class="comment">//请求</span></span><br><span class="line"><span class="comment">//            request.getSession().setAttribute("pids",pids);//把这个东西先存进来先</span></span><br><span class="line">            String result;</span><br><span class="line">            <span class="comment">//发送请求并返回</span></span><br><span class="line">            <span class="comment">//这个会返回是支付宝的支付页面，直接在让这个html代码在页面上运行就直接用pw.write输出就可以了</span></span><br><span class="line">            result = alipayClient.pageExecute(alipayRequest).getBody();</span><br><span class="line">            <span class="comment">//System.out.println("*********************\n返回结果为："+result);</span></span><br><span class="line">            response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">            PrintWriter pw=response.getWriter();</span><br><span class="line">            pw.write(result);</span><br><span class="line">            pw.flush();</span><br><span class="line">            pw.close();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//            return result;</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>8.要查看具体的相应数据，和返回的具体的数据就要去查看官方文档了，我这里列举一部分出来,请求的参数可以根据情况拼接成json数据然后发出请求。在alipayRequest.setBizContent()方法里面可以拼接请求的参数。</p>
<p><img src="5.png" alt="5"></p>
<p><img src="6.png" alt="6"><br>9.上面的功能如果都完成了的话，我们接下来就可以模拟支付功能了，我们需要下载<a href="https://sandbox.alipaydev.com/user/downloadApp.htm" target="_blank" rel="noopener">支付宝沙箱支付app</a>，来进行支付，支付的金额可以任意支付，只是进行模拟支付<br><img src="7.png" alt="7"></p>
]]></content>
      <categories>
        <category>基本常识</category>
      </categories>
      <tags>
        <tag>基本常识</tag>
      </tags>
  </entry>
</search>
