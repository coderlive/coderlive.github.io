<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/18/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>/go</title>
    <url>/2020/04/19/go/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>go</category>
      </categories>
      <tags>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>/html</title>
    <url>/2020/04/19/html/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>/js</title>
    <url>/2020/04/19/js/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>/spring</title>
    <url>/2020/04/19/spring/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>spring</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>/springmvc</title>
    <url>/2020/04/19/springmvc/index/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>springmvc</category>
      </categories>
      <tags>
        <tag>springmvc</tag>
      </tags>
  </entry>
  <entry>
    <title>java陷阱之重写私有方法</title>
    <url>/2020/04/19/java/java%E9%99%B7%E9%98%B1%E4%B9%8B%E9%87%8D%E5%86%99%E7%A7%81%E6%9C%89%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>当我们有时候写JAVA代码的时候可能会天真的使用下面的写法，<br>你会发现你所写的方法是错误的:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package polymorphism;</span><br><span class="line"></span><br><span class="line">public class PrivateOverride &#123;</span><br><span class="line">    private void f() &#123;</span><br><span class="line">        System.out.println(&quot;private f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PrivateOverride po &#x3D; new Derived();</span><br><span class="line">        po.f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Derived extends PrivateOverride &#123;</span><br><span class="line">    public void f() &#123;</span><br><span class="line">        System.out.println(&quot;public f()&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private f()</span><br></pre></td></tr></table></figure>
<p>你可能期望输出是 public f()，然而 private 方法可以当作是 final 的，<br>对于派生类来说是隐蔽的。因此，这里 Derived 的 f() 是一个全新的方法；<br>因为基类版本的 f() 屏蔽了 Derived ，因此它都不算是重写方法。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis运行流程</title>
    <url>/2020/04/19/mybatis/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;MyBatis的整个运行流程，也是紧紧围绕着数据库连接池配置文件MyBatisConfig.xml(一般按个人<br>喜好来命名，但规范命名比较好)，以及SQL映射配置文件Mapper.xml而开展的。<br>&nbsp;&nbsp;&nbsp;&nbsp;首先SqlSessionFactory会话工厂会通过Resources资源信息加载对象获取MyBatisConfig.xml配置<br>文件信息,然后生产可以与数据库进行交互会话实例类SqlSession。会话实例类SqlSession可以根据Mapper配置文件<br>中的SQL配置，去执行相应的增删改查操作。而在SQLSession类内部，是通过执行器Executor(分为基本执行器和缓存<br>执行器)对数据库进行操作的。执行器Executor与数据库交互，依靠的是底层封装对象Mappered Statement，它封装了<br>从Mapper文件中读取的信息（包括SQL语句、输入参数、输出结果类型）。通过执行器Executor与底层封装对象MapperedStatement的结合，MyBatis就实现了与数据库进行交互的功能。<br>  Mybatis运行流程结构如下图所示：</p>
<img src="/2020/04/19/mybatis/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B/MyBatis%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.png" class="" title="MyBatis运行流程">]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>maven引入log4j文件</title>
    <url>/2020/05/06/maven/maven/</url>
    <content><![CDATA[<p>在maven中使用log4j时还需要引入下面的坐标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.17&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
<h3>配置log4j</h3>
Appender 为日志输出目的地，Log4j提供的appender有以下几种：
org.apache.log4j.ConsoleAppender（控制台），
org.apache.log4j.FileAppender（文件），
org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）

<p>Layout：日志输出格式，Log4j提供的layout有以下几种：<br>org.apache.log4j.HTMLLayout（以HTML表格形式布局），<br>org.apache.log4j.PatternLayout（可以灵活地指定布局模式），<br>org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），<br>org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）</p>
<p>打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息，如下:<br>　　%m 输出代码中指定的消息<br>　　%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL<br>　　%r 输出自应用启动到输出该log信息耗费的毫秒数<br>　　%c 输出所属的类目，通常就是所在类的全名<br>　　%t 输出产生该日志事件的线程名<br>　　%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”<br>　　%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日 22 ： 10 ： 28 ， 921<br>　　%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )</p>
<h4>log4j.properties</h4>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### set log levels ###</span><br><span class="line">log4j.rootLogger &#x3D; DEBUG,Console,File</span><br><span class="line">###  输出到控制台  ###</span><br><span class="line">log4j.appender.Console&#x3D;org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.Target&#x3D;System.out</span><br><span class="line">log4j.appender.Console.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern&#x3D; %d&#123;ABSOLUTE&#125; %5p %c&#123;1&#125;:%L - %m%n</span><br><span class="line">### 输出到日志文件 ###</span><br><span class="line">log4j.appender.File&#x3D;org.apache.log4j.RollingFileAppender </span><br><span class="line">log4j.appender.File.File&#x3D;$&#123;project&#125;&#x2F;WEB-INF&#x2F;logs&#x2F;app.log</span><br><span class="line">log4j.appender.File.DatePattern&#x3D;_yyyyMMdd&#39;.log&#39;</span><br><span class="line">log4j.appender.File.MaxFileSize&#x3D;10MB</span><br><span class="line">log4j.appender.File.Threshold&#x3D;ALL</span><br><span class="line">log4j.appender.File.layout&#x3D;org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.File.layout.ConversionPattern&#x3D;[%p][%d&#123;yyyy-MM-dd HH\:mm\:ss,SSS&#125;][%c]%m%n</span><br></pre></td></tr></table></figure>
<h3>使用log4j</h3>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.xwx.text;</span><br><span class="line"></span><br><span class="line">import org.apache.log4j.Logger;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line">	</span><br><span class="line">	private static Logger log &#x3D; Logger.getLogger(Test.class.getClass());</span><br><span class="line">	@Test</span><br><span class="line">	public void testLog()&#123;</span><br><span class="line">		log.debug(&quot;debug&quot;);</span><br><span class="line">		log.error(&quot;error&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>maven</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis缓存机制</title>
    <url>/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h2>一级缓存的工作原理如下图所示：</h2>
<img src="/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98.png" class="" title="MyBatis缓存机制">
&nbsp;&nbsp;&nbsp;&nbsp;该图阐述了一个SqlSession类的实例对象下的一级缓存的工作原理。当第一次查询id为1
的用户时，sqlSession首先到一级缓存区域查询，如果没有相关数据，则会到数据库中去查询。然后sqlSession将该
查询结果保存到一级缓存区域。在下一次查询的时候，如果sqlSession执行了commit查询操作（即执行了修改、添加
和删除），则会清空它的一级缓存区域，以此来保证缓存中的信息时最新的，避免脏读现象发生。如果期间sqlSession
一直没有执行commit操作修改数据，那么下一次查询id为1的用户信息时，sqlSession在一级缓存中就会发现该信息，
然后从缓存中获取用户信息。
<h2>二级缓存原理</h2>
&nbsp;&nbsp;&nbsp;&nbsp;由上可知，一级缓存时基于同一个SqlSession类的实例对象的。但是，有些时候在Web工程
中会将执行查询操作的方法封装在一个Service方法中，当执行完一次后，Service方法结束，此时SqlSession类的实例
对象就会关闭，一级缓存就会被清空。此时若再次调用Service方法查询同一个信息时，会新打开一个SqlSession类的实
例对象，由于一级缓存已经被清空，所以执行再次访问数据库，并将查询的数据再次放入缓存中。
&nbsp;&nbsp;&nbsp;&nbsp;为了解决这个问题，Mybatis引入了二级缓存。Mybatis的二级缓存存在于Mapper实例中，当
多个SqlSession类的实例对象加载Mapper进行查询时，会先去Mapper的缓存区域寻找该值，若不存在，则去数据库中查询，
然后将查询出来的结果存储到缓存区域，待下次查询相同数据时，从缓存区域中获取。当某个Sqlsession类的实例对象执行
了增、删、改等改变数据的操作时，Mapper实例都会清空二级缓存。
<img src="/2020/04/19/mybatis/mybatis%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98.png" class="" title="MyBatis缓存机制">
<h2>Mybatis的一级缓存和二级缓存执行顺序</h2>
1、先判断二级缓存是否开启，如果没开启，再判断一级缓存是否开启，如果没开启，直接查数据库

<p>2、如果一级缓存关闭，即使二级缓存开启也没有数据，因为二级缓存的数据从一级缓存获取</p>
<p>3、一般不会关闭一级缓存</p>
<p>4、二级缓存默认不开启</p>
<p>5、如果二级缓存关闭，直接判断一级缓存是否有数据，如果没有就查数据库</p>
<p>6、如果二级缓存开启，先判断二级缓存有没有数据，如果有就直接返回；如果没有，就查询一级缓存，如果有就返回，没有就查询数据库；</p>
<p>==》综上：先查二级缓存，再查一级缓存，再查数据库；即使在一个sqlSession中，也会先查二级缓存；一个namespace中的查询更是如此；</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
      </tags>
  </entry>
</search>
